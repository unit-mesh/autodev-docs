"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7930],{4526:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"development/git-commit-prompting","title":"Git \u63d0\u4ea4\u89c4\u8303","description":"Git \u63d0\u4ea4\u63d0\u793a\u793a\u4f8b","source":"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/development/git-commit-prompting.md","sourceDirName":"development","slug":"/development/git-commit-prompting","permalink":"/development/git-commit-prompting","draft":false,"unlisted":false,"editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/docs/development/git-commit-prompting.md","tags":[],"version":"current","frontMatter":{"layout":"default","title":"Git \u63d0\u4ea4\u89c4\u8303","nav_order":10,"parent":"\u5f00\u53d1\u6307\u5357"},"sidebar":"developmentSidebar","previous":{"title":"\u4ee3\u7801\u5ba1\u67e5","permalink":"/development/code-review-prompting"},"next":{"title":"Refactoring Prompt","permalink":"/development/refactoring-prompt"}}');var r=t(4848),s=t(8453);const a={layout:"default",title:"Git \u63d0\u4ea4\u89c4\u8303",nav_order:10,parent:"\u5f00\u53d1\u6307\u5357"},o=void 0,c={},l=[];function p(e){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Git \u63d0\u4ea4\u63d0\u793a\u793a\u4f8b"}),"\n",(0,r.jsx)(n.p,{children:'\u4e3a\u7ed9\u5b9a\u7684\u4ee3\u7801\u5dee\u5f02\u7f16\u5199\u8fde\u8d2f\u4e14\u63cf\u8ff0\u6027\u7684\u63d0\u4ea4\u4fe1\u606f\u3002\n\u786e\u4fdd\u540c\u65f6\u5305\u542b"\u4fee\u6539\u5185\u5bb9"\u548c"\u4fee\u6539\u539f\u56e0"\u7684\u4fe1\u606f\u3002\n\u4ee5\u4e0d\u8d85\u8fc750\u4e2a\u5b57\u7b26\u7684\u7b80\u77ed\u7948\u4f7f\u53e5\u5f00\u5934\u3002\n\u7a7a\u4e00\u884c\u540e\uff08\u5982\u6709\u5fc5\u8981\uff09\u7ee7\u7eed\u6dfb\u52a0\u66f4\u8be6\u7ec6\u7684\u8bf4\u660e\u3002\n\u8be6\u7ec6\u8bf4\u660e\u5e94\u5c11\u4e8e200\u4e2a\u5b57\u7b26\u3002'}),"\n",(0,r.jsx)(n.p,{children:"\u793a\u4f8b\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"fix(\u8ba4\u8bc1): \u6dfb\u52a0\u5bc6\u7801\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f"}),"\n",(0,r.jsx)(n.li,{children:"feat(\u5b58\u50a8): \u65b0\u589e\u6d4b\u8bd5\u7528\u4f8b"}),"\n",(0,r.jsx)(n.li,{children:"test(Java): \u4fee\u590d\u7528\u6237\u63a7\u5236\u5668\u7684\u6d4b\u8bd5\u7528\u4f8b"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u4ee3\u7801\u5dee\u5f02\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:'modify file src/main/kotlin/cc/unitmesh/devti/prompting/VcsPrompting.kt\n     private val defaultIgnoreFilePatterns: List<PathMatcher> = listOf(\n         "**/*.md", "**/*.json", "**/*.jsonl", "**/*.txt", "**/*.xml", "**/*.yml", "**/*.yaml", "**/*.html",\n         "**/*.log", "**/*.tmp", "**/*.temp", "**/*.bak", "**/*.swp",\n-         "**/*.svg",\n+        "**/*.svg",\n     ).map {\n         FileSystems.getDefault().getPathMatcher("glob:$it")\n     }\n         project: Project,\n         ignoreFilePatterns: List<PathMatcher> = defaultIgnoreFilePatterns,\n     ): String? {\n+        val changeText = project.service<DiffSimplifier>().simplify(selectList, ignoreFilePatterns)\n+\n+        if (changeText.isEmpty()) {\n+            return null\n+        }\n+\n+        val processedText = DiffSimplifier.postProcess(changeText)\n         val writer = StringWriter()\n         if (details.isNotEmpty()) {\n             details.forEach { writer.write(it.fullMessage + "\\n\\n") }\n         }\n-        writer.write("Changes:\\n\\n")\n-        val changeText = project.service<DiffSimplifier>().simplify(selectList, ignoreFilePatterns)\n-\n-        if (changeText.isEmpty()) {\n-            return null\n-        }\n+        writer.write(\n+            """\n+            Changes:\n+            \n+            ```patch\n+            $processedText\n+            ```\n+            """.trimIndent()\n+        )\n-\n-\n-        writer.write("```patch\\n\\n")\n-        writer.write(DiffSimplifier.postProcess(changeText))\n-        writer.write("\\n\\n```\\n\\n")\n-\n         return writer.toString()\n     }\n     fun hasChanges(): List<Change> {\n-        val changeListManager = ChangeListManagerImpl.getInstance(project)\n-        val changes = changeListManager.changeLists.flatMap {\n-            it.changes\n-        }\n-\n-        return changes\n+        val changeListManager = ChangeListManager.getInstance(project)\n+        return changeListManager.changeLists.flatMap { it.changes }\n     }\n }\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);