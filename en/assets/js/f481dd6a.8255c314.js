"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5671],{155:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"customize/custom-test-template","title":"Custom Test Prompt Template","description":"Create template files under prompts/templates directory, like:","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/customize/custom-test-template.md","sourceDirName":"customize","slug":"/customize/custom-test-template","permalink":"/en/customize/custom-test-template","draft":false,"unlisted":false,"editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/docs/customize/custom-test-template.md","tags":[],"version":"current","frontMatter":{"layout":"default","title":"Custom Test Prompt Template","parent":"Customize Features","nav_order":15},"sidebar":"customizeSidebar","previous":{"title":"Custom Quick Action","permalink":"/en/customize/custom-quick-action"},"next":{"title":"Prompt Override","permalink":"/en/customize/prompt-override"}}');var o=n(4848),r=n(8453);const i={layout:"default",title:"Custom Test Prompt Template",parent:"Customize Features",nav_order:15},l=void 0,c={},a=[];function u(e){const t={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Create template files under ",(0,o.jsx)(t.code,{children:"prompts/templates"})," directory, like:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Java language: ",(0,o.jsx)(t.code,{children:"ControllerTest.java"}),", ",(0,o.jsx)(t.code,{children:"ServiceTest.java"}),", ",(0,o.jsx)(t.code,{children:"Test.java"})]}),"\n",(0,o.jsxs)(t.li,{children:["Kotlin language: ",(0,o.jsx)(t.code,{children:"ControllerTest.kt"}),", ",(0,o.jsx)(t.code,{children:"ServiceTest.kt"}),", ",(0,o.jsx)(t.code,{children:"Test.kt"})]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"when generate test file, will use these templates."}),"\n",(0,o.jsx)(t.p,{children:"For example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-kotlin",children:"// You should use follow @SpringBootTest with RANDOM_PORT for the web environment, or you test will be failed.\n// You should use @ExtendWith(SpringExtension::class) for the test class.\n// For example:\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@ExtendWith(SpringExtension::class)\nclass /* Here some be {ControllerName} */ControllerTest {\n    private lateinit var mockMvc: MockMvc\n\n    // other some mock beans\n\n    @BeforeEach\n    fun setup() {\n        mockMvc = MockMvcBuilders.standaloneSetup(/* {ControllerName} */Controller(/* some mock beans */)).build()\n    }\n\n    // the test methods\n}\n"})})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(6540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);