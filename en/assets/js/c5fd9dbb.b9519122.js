"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5418],{930:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/03/26/autodev-2-0","metadata":{"permalink":"/en/blog/2025/03/26/autodev-2-0","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2025-03-26-autodev-2-0.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025-03-26-autodev-2-0.md","title":"AutoDev 2.0 Officially Released! Agents x Open Source Ecosystem = Infinite Possibilities","description":"Note: After months of waiting, domestic models (DS V3-0324) finally support AutoDev\'s capabilities. It\'s time to release AutoDev 2.0!","date":"2025-03-26T00:00:00.000Z","tags":[],"readingTime":4.055,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"AutoDev 2.0 Officially Released! Agents x Open Source Ecosystem = Infinite Possibilities"},"unlisted":false,"nextItem":{"title":"AutoDev Planner","permalink":"/en/blog/2025/03/18/autodev-planner"}},"content":"Note: After months of waiting, domestic models (DS V3-0324) finally support AutoDev\'s capabilities. It\'s time to release AutoDev 2.0!\\n\\nIn April 2023, we developed AutoDev\'s first feature: AutoCRUD. After two years of rapid iteration, we\'ve phased out this feature. The new AutoDev 2.0 is here - agent-driven AI programming has fundamentally changed our previous architecture. In AutoDev 2.0, you can:\\n\\n- Use coding agent Sketch for automated programming\\n- Leverage automated programming planner AutoDev Planner\\n- Utilize system migration assistant Bridge for legacy system refactoring\\n- Employ Observer to dynamically monitor code changes in IDE\\n- Connect to tool ecosystem via Model Context Protocol (MCP)\\n- Use multiple open-source models in different scenarios (coding, reasoning, application, completion, etc.)\\n- ...\\n\\nThe best part? AutoDev 2.0 is open-source. You\'re free to use, modify, and share it. Let\'s explore this world of infinite possibilities together! Meanwhile, as the second-generation AI programming tool on the JetBrains IDE platform, you can fully leverage JetBrains\' plugin ecosystem to empower AutoDev 2.0!\\n\\n## Coding Agent: Sketch\\n\\nOur motivation for developing AutoDev 2.0 came from the launch of DeepSeek V3 model. We built Sketch View using the Shire agent language, first applying it to multi-file programming support. We then integrated it into AutoDev 2.0, leveraging the rich IDEA plugin ecosystem to create better IDE programming experiences.\\n\\n### Interactive Decision View: Sketch View\\n\\nSketch View provides a new interactive interface that helps you better understand architectures and make decisions. Key features:\\n\\n- **Interactive Design**. Diverse Patch/Diff processing with Lint checks for generated code\\n- **Developer Experience**. Automatic WebView launch for compilation verification when starting dev services\\n- **Quality & Security**. Dependency security checks when generating dependency files\\n\\nYou can also use it to view code structures and improve code writing.\\n\\n### Isolated Environment Tool Invocation: DevIns\\n\\nIn AutoDev 1.0, we designed DevIns DSL to build instruction abstractions for isolated environments. With DevIns instructions, AutoDev can:\\n\\n- **Safe Operations**. Perform security checks on instructions like Shell and SQL, instead of relying on unreliable LLM analysis\\n- **Model Agnostic**. Enable tool invocation using CoT across different models without function tool dependencies\\n- **Key Context**. Enrich syntax analysis and architectural views through IDE\'s PSI interfaces, providing system-critical context\\n\\nDevIns also integrates seamlessly with MCP ecosystem for better tool invocation.\\n\\n## Visible Task Planning: AutoDev Planner\\n\\nPlanner is Sketch\'s core feature, offering a new task planning experience. With AutoDev Planner, you can:\\n\\n- **Visible Task Planning**. Track current task progress through Pin and Planner ToolWindow\\n- **Dynamic Task Planning**. AI dynamically adjusts task plans based on context (model-dependent, may not update in real-time)\\n- **Manual Task Execution**. Manually execute unfinished tasks to better adjust planning\\n\\nCombined with reasoning models like DeepSeek R1, AutoDev Planner can better adapt task planning to user needs.\\n\\n## Passive Error Observation: Observer\\n\\nObserver is a new Sketch feature that helps monitor code changes. It can observe:\\n\\n- Test failures. Automatically sends failure context (relevant code) to models\\n- Build failures. Sends build logs (Gradle/Maven) to models automatically\\n- Dependency addition failures. Automatically reports issues to models\\n- ...\\n\\nThrough passive error observation, AutoDev better understands code changes to improve development efficiency.\\n\\n## Legacy System Migration Agent: AutoDev Bridge (Experimental)\\n\\nBridge is our new feature for legacy system migration, including:\\n\\n- Migration Paths. LLM-powered generation of system migration paths using \\"Explore-Sense-Respond\\" framework\\n- Architectural Views. AI-powered tool invocation for deep system scanning to generate C4 model-compliant blueprints\\n- Business Logic Analysis. Combines AST parsing and runtime call chain tracing for precise business logic restoration\\n- Migration Execution. Generates multi-level verification including unit tests, integration tests, and E2E tests to ensure post-migration functionality\\n\\nAs an experimental feature, AutoDev Bridge isn\'t fully mature yet, but we believe it will play important roles in future migrations.\\n\\n## DevOps Ecosystem Integration: Bidirectional MCP\\n\\nMCP (Model Context Protocol) is an excellent open protocol helping AI agents better understand context. In AutoDev 2.0, we\'ve implemented bidirectional integration between MCP and JetBrains plugin ecosystem for better tool invocation:\\n\\n- MCP as Tool. Encapsulates MCP through DevIns instructions to invoke third-party tools\\n- AutoDev as Service. Exposes AutoDev as MCP service callable by any Agent Tool\\n\\nThis creates seamless integration between AutoDev and the tool ecosystem, enhancing contextual capabilities and reducing hallucinations.\\n\\n## Others\\n\\nWe\'ve redesigned the UI configuration page. For details, refer to new documentation: https://ide.unitmesh.cc/quick-start\\n\\n### AutoDev 1.x Features\\n\\nAutoDev 1.x features remain available, with less-used features like AutoCRUD removed.\\n\\n### Tool Issues Remain: Can Efficiency Really Improve?\\n\\nEven with significant efficiency improvements, productivity gains might be limited. How much time do you actually spend writing code?????????????\\n\\n### Install AutoDev 2.0\\n\\nDownload the latest version from GitHub: https://github.com/unit-mesh/auto-dev\\n\\nOr add plugin repository via:  \\n`Settings` \u2192 `Plugins` \u2192 `Marketplace` \u2192 `Manage Plugin Repositories` \u2192 `Add`  \\nhttps://plugin.unitmesh.cc/updatePlugins.xml  \\nThen search for `AutoDev`\\n\\nWe\'re working to relist on JetBrains Marketplace, but manual installation via source code is currently available."},{"id":"/2025/03/18/autodev-planner","metadata":{"permalink":"/en/blog/2025/03/18/autodev-planner","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2025-03-18-autodev-planner.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025-03-18-autodev-planner.md","title":"AutoDev Planner","description":"Recently, we\'ve implemented a new feature in AutoDev: AutoDev Planner, a coding task planning functionality built on the DeepSeek R1 reasoning model. Of course, besides DeepSeek R1, you can also use other models.","date":"2025-03-18T00:00:00.000Z","tags":[],"readingTime":3.335,"hasTruncateMarker":false,"authors":[],"frontMatter":{"layout":"default","title":"AutoDev Planner"},"unlisted":false,"prevItem":{"title":"AutoDev 2.0 Officially Released! Agents x Open Source Ecosystem = Infinite Possibilities","permalink":"/en/blog/2025/03/26/autodev-2-0"},"nextItem":{"title":"AutoDev MCP","permalink":"/en/blog/2025/03/12/autodev-mcp"}},"content":"Recently, we\'ve implemented a new feature in AutoDev: AutoDev Planner, a coding task planning functionality built on the DeepSeek R1 reasoning model. Of course, besides DeepSeek R1, you can also use other models.\\n\\nIn AutoDev Planner, AI will generate a task plan for subsequent coding based on your input and collected context. This coding plan can then be used with other instruction-following models like DeepSeek V3 to generate code, edit code, etc.\\n\\n## Insight 1: Visibility of AI Coding Task Progress\\n\\nWhen designing AI coding agents, an interesting consideration is how users perceive coding task progress - whether they should explicitly see the progress or implicitly sense it.\\n\\n### Copilot Workspace: Early Explicit AI Tasks\\n\\nLast year, I experimented with GitHub Copilot Workspace for frontend development. After trying dozens of small requirements (even simple i18n translations), its performance didn\'t meet expectations, likely limited by GPT-4\'s capabilities. However, Copilot Workspace\'s approach remains valuable:\\n\\n- Brainstorm. Conduct brainstorming for user tasks\\n- Task. Convert tasks into editable plans\\n- Execute. Execute plans to generate code Pull Requests\\n- PR. Submit changes as Pull Requests\\n\\nUsers can explicitly observe AI\'s thinking, editing, and execution processes, though it doesn\'t dynamically adjust plans (based on 2024 understanding).\\n\\n### Cursor: Implicit Task Automation with Retries\\n\\nThe popular AI coding tool Cursor provides excellent AI Editor experience:\\n- Automatically collects IDE context\\n- Edits code\\n- Automatically fixes lint issues and retries on errors\\n- ...\\n\\nWhile users can vaguely understand AI operations through text, frequent retries quickly obscure the process.\\n\\n### JetBrains Junie: Dynamic AI Task Planning\\n\\nThe latest AI coding tool JetBrains Junie offers dynamic task planning:\\n- Analyzes problems and generates task plans\\n- Executes tasks step-by-step with contextual awareness\\n- Dynamically adjusts plans during execution\\n\\nUsers can observe continuous plan adjustments until task completion or termination.\\n\\n## Insight 2: The Potential of Reasoning Models in Task Planning\\n\\nAs we know, 2024\'s reasoning models (\\"deep-thinking models\\") have expanded possibilities. Through experiments in AutoDev Sketch (similar to Cursor Composer\'s auto-coding agent), we found DeepSeek R1 outperforms other domestic models in tool invocation (based on DevIns instructions) with same context. Compared to DeepSeek V3, R1 utilizes more tools.\\n\\nIdeally, we should use R1 for initial tool dialogue and secondary task planning, but its slower speed (equivalent to extra API calls) remains a constraint. However, R1\'s advantages remain evident, and we believe others share similar experiences.\\n\\nOf course, large-scale experiments haven\'t been conducted due to the significant effort required to build comprehensive test datasets.\\n\\n## AutoDev Planner: Task Planning for Agent Programming\\n\\nBased on these insights, we developed the new anthropomorphic feature: AutoDev Planner to enhance Sketch\'s task planning capabilities. Core features include:\\n\\n- **Visible Task Planning**: Track progress through Pin and Planner ToolWindow\\n- **Dynamic Planning**: AI adjusts plans contextually (model-dependent)\\n- **Manual Task Execution**: Users can manually execute pending tasks\\n- **Plan Review**: Manual model invocation for plan review (automatic review avoided due to token costs)\\n\\nThe core concept remains simple: invoke models to generate plans and display interactions.\\n\\n### Key Point 1: Reasoning Model-Based Planning\\n\\nSince reasoning models differ from regular models in prompt understanding and instruction following, we redesigned prompts for R1 compatibility.\\n\\nAfter initial context collection and reasoning model configuration, R1 generates task plans containing: tasks, steps, and progress status. These plans are then displayed to users.\\n\\n### Key Point 2: Interactive Task Planning\\n\\nUnlike other AI coding tools, we emphasize task planning as critical interaction:\\n- **Status Display**:\\n    - Completed tasks marked\\n    - Manual execution for pending tasks\\n- **Pin**: Pin tasks to IDE locations\\n- **File Interaction**: Click filenames in tasks to open files\\n- **Editing**: Pause and adjust unsuitable plans\\n- **Review**: Manual plan review invocation\\n\\nVisualizing tasks enhances AI coding experience - the original intention of AutoDev Planner.\\n\\n## Conclusion\\n\\nAutoDev Planner is a reasoning model-based task planning feature that helps users better understand AI coding progress and adjust plans. While still imperfect, we welcome issues and PRs on GitHub.\\n\\nDownload the latest version: https://github.com/unit-mesh/auto-dev/releases"},{"id":"/2025/03/12/autodev-mcp","metadata":{"permalink":"/en/blog/2025/03/12/autodev-mcp","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2025-03-12-autodev-mcp.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025-03-12-autodev-mcp.md","title":"AutoDev MCP","description":"In the realm of Agentic Coding, tool usage (Tool Use/Function calling) presents a fascinating topic. Completing a software development task requires utilizing numerous tools, extending beyond the native capabilities of IDEs and their plugin ecosystems to include various external tools like Git, Docker, Kubernetes, Jenkins, etc. How to enable AI to be aware of more tools and their usage presents an intriguing challenge.","date":"2025-03-12T00:00:00.000Z","tags":[],"readingTime":3.36,"hasTruncateMarker":false,"authors":[],"frontMatter":{"layout":"default","title":"AutoDev MCP"},"unlisted":false,"prevItem":{"title":"AutoDev Planner","permalink":"/en/blog/2025/03/18/autodev-planner"},"nextItem":{"title":"AutoDev Bridge","permalink":"/en/blog/2025/03/06/autodev-bridge"}},"content":"In the realm of Agentic Coding, tool usage (Tool Use/Function calling) presents a fascinating topic. Completing a software development task requires utilizing numerous tools, extending beyond the native capabilities of IDEs and their plugin ecosystems to include various external tools like Git, Docker, Kubernetes, Jenkins, etc. How to enable AI to be aware of more tools and their usage presents an intriguing challenge.\\n\\nTherefore, I spent a day implementing relevant functionalities in AutoDev: establishing AutoDev as an MCP service that can be invoked by any Agent Tool, while also enabling AutoDev to function as an MCP client capable of calling any MCP service.\\n\\n## Prelude 1: From Progressive AI Agent Solutions to AutoDev as MCP Service\\n\\nWithin the broader context of AI Agents, such as automated Computer Use scenarios, IDEs themselves become just another invokable Agent tool. Current AI Agent implementations demonstrate a progressive approach to Agent Tool usage - as developers familiar with E2E testing know, UI automation proves highly inefficient. This explains why we wrote minimal UI automation tests when developing AutoDev.\\n\\nWhile our current AI Coding implementation centers around IDEs, another scenario exists where Agent Tools take precedence:\\n- Agents obtain requirements through browser manipulation\\n- Agents launch IDEs to write code\\n- Agents operate DevOps tools for deployment\\n- ...\\n\\nGiven that Agent Tool invocation appears to be an emerging trend towards 2025, why not position AutoDev as an MCP service? This would allow any Agent Tool (including Cursor, Cline, GitHub Copilot, etc.) to leverage AutoDev\'s services and access high-quality IDE context.\\n\\n## Prelude 2: From MCP as Agent Tool Ecosystem to MCP Services as AutoDev Commands\\n\\nPreviously, AutoDev prioritized leveraging IDE ecosystems and its own plugin architecture to enhance AI-supported end-to-end development workflows. However, even with enriched plugin capabilities, we still require numerous Agent Tools.\\n\\n### Agent Tools Define Baseline Capabilities for AI IDEs\\n\\nOur analysis of various AI Coding tools reveals that VSCode-based AI Editors demonstrate remarkably similar tooling capabilities, which can be comprehensively charted. In contrast, IDE-based AI Coding plugins (like AutoDev and JetBrains Junie) offer more sophisticated capabilities including AST manipulation, debugging, and FQN lookups - typically providing around 20 core IDE capabilities compared to VSCode\'s dozen.\\n\\nAs AI Coding expands into requirements management, deployment, and operations, the corresponding tool ecosystem will inevitably grow more diverse.\\n\\n### MCP Open Source Ecosystem Emerges\\n\\nThe Model Context Protocol (MCP), introduced by Anthropic (creators of Claude), provides standardized interfaces for LLM applications to access external information, tools, and resources. While AutoDev offers powerful customization capabilities like Custom Agents:\\n\\n- Some tools remain unpredictable (e.g., internal corporate tools)\\n- MCP\'s tool ecosystem is rapidly maturing into a standard (despite regional variations)\\n\\nSince Cursor and Cline adopted MCP, numerous open-source MCP implementations have formed a thriving overseas ecosystem.\\n\\n## AutoDev x MCP: Bidirectional Empowerment\\n\\nBuilding upon MCP-related plugins and the io.modelcontextprotocol ecosystem, we developed a bidirectional empowerment framework:\\n\\n- AutoDev functions as an MCP server accessible to any Agent Tool\\n- AutoDev operates as an MCP client invoking any MCP service\\n\\nThis dual approach consolidates our MCP capabilities.\\n\\n### AutoDev as MCP Server\\n\\nBased on JetBrains\' MCP implementation, we enable AutoDev\'s MCP server capability (Note: Requires MCP activation in configuration). Simple JSON configuration suffices, as shown in this Cline plugin example:\\n\\n```json\\n{\\n  \\"mcpServers\\": {\\n    \\"AutoDev\\": {\\n      \\"command\\": \\"npx\\",\\n      \\"args\\": [\\n        \\"-y\\",\\n        \\"@jetbrains/mcp-proxy\\"\\n      ],\\n      \\"disabled\\": false,\\n      \\"autoApprove\\": []\\n    }\\n  }\\n}\\n```\\n\\nThe current version leverages official capabilities with some database enhancements, pending domestic MCP service availability for further expansion.\\n\\n### AutoDev as MCP Client\\n\\nSimilarly, configure MCP services in AutoDev\'s Custom Agent page. Official MCP example:\\n\\n```json\\n{\\n  \\"mcpServers\\": {\\n    \\"filesystem\\": {\\n      \\"command\\": \\"npx\\",\\n      \\"args\\": [\\n        \\"-y\\",\\n        \\"@modelcontextprotocol/server-filesystem\\",\\n        \\"/Volumes/source/ai/auto-dev\\"\\n      ]\\n    }\\n  }\\n}\\n```\\n\\nThe MCP service\'s tools then become available in AutoDev. DevIns conversion example:\\n\\n     /list_directory\\n     ```json\\n     {\\n      \\"path\\": \\"/Volumes/source/ai/autocrud/docs/mcp\\"\\n     }\\n     ```\\n\\nThrough AutoDev\'s powerful DevIns Commands, users can now invoke any MCP service - including AI Agents.\\n\\n## Additional Notes\\n\\nLife is short, I have AI.\\n\\n- Detailed documentation: https://ide.unitmesh.cc/mcp\\n- Download latest AutoDev (v2.0.0-rc.2): https://github.com/unit-mesh/auto-dev/releases/tag/v2.0.0-rc.2"},{"id":"/2025/03/06/autodev-bridge","metadata":{"permalink":"/en/blog/2025/03/06/autodev-bridge","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2025-03-06-autodev-bridge.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025-03-06-autodev-bridge.md","title":"AutoDev Bridge","description":"In 2023, given the limited capabilities of models at that time, we designed a series of legacy system features in AutoDev. By 2025, through successive iterations of the autonomous programming agent AutoDev Sketch, we began exploring how to apply AI agents to legacy systems, which led to the conception of AutoDev Bridge.","date":"2025-03-06T00:00:00.000Z","tags":[],"readingTime":3.51,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"AutoDev Bridge"},"unlisted":false,"prevItem":{"title":"AutoDev MCP","permalink":"/en/blog/2025/03/12/autodev-mcp"},"nextItem":{"title":"AutoDev Composer\uff1athe Intellij IDEA Cursor Alternative","permalink":"/en/blog/2025/01/11/autodev-2-0-preview"}},"content":"In 2023, given the limited capabilities of models at that time, we designed a series of legacy system features in AutoDev. By 2025, through successive iterations of the autonomous programming agent AutoDev Sketch, we began exploring how to apply AI agents to legacy systems, which led to the conception of AutoDev Bridge.\\n\\n## Why Can Large Language Models Perform Better?\\n\\nPreviously, our company Thoughtworks had accumulated extensive experience in this domain, including migration strategy design and safety net construction. However, regardless of the migration pattern used (Strangler, Rehabilitator, etc.), human intervention was always ultimately required. By 2025, an increasing number of AI agents have demonstrated capabilities for automated migration, prompting us to refine our open-source solution.\\n\\nWhy can large language models perform better in legacy system migration?\\n\\n- **Designing reasonable path planning**. Typically prioritizing cost considerations, LLMs serve as excellent knowledge bases for cost assessment.\\n- **Generating architectural blueprints**. By analyzing directory structures, dependency information, and APIs, AI can outline preliminary architectural blueprints for existing systems.\\n- **Extracting business knowledge from code**. Through AST analysis and other methods, AI can interpret business logic in existing code and rewrite based on it.\\n- **Cross-language translation**. Unlike regular code generation, LLMs can effectively translate code into target languages within seconds to minutes.\\n- **Enhanced migration safety nets**. Generating automated tests to validate migration correctness enables precise regression testing (Note: Frontend implementations still have limitations).\\n- ......\\n\\nTherefore, we only need to focus on two key considerations:\\n\\n- How can AI better understand legacy systems with tool assistance?\\n- How to reduce migration risks?\\n\\n## How Does AutoDev Bridge Accelerate Legacy System Migration?\\n\\nBased on our understanding of legacy system migration, we designed the initial implementation of AutoDev Bridge, which primarily includes:\\n\\n- LLM-generated migration plans (Following the \\"Explore-Sense-Respond\\" framework)\\n- Current architecture analysis based on C4 model (Using AI tool invocations)\\n- Business logic analysis combining AST and call chains (AI code comprehension)\\n- Migration test case generation\\n- AI-assisted code translation\\n- ......\\n\\nThrough tight integration with IDEs, AutoDev Bridge can obtain highly accurate development context to further reduce AI hallucinations.\\n\\n### Explore-Sense-Respond: LLM-Generated Migration Plans\\n\\nHistorically, we categorized legacy system migration as a complex problem in the Cynefin framework - where outcomes cannot be predicted and must be discovered through practice. Drawing from Cynefin philosophy, we designed AutoDev Bridge\'s cognitive framework: Explore first, then Sense, then Respond. Since we expect models to have a blueprint (C4 model) before taking action, we divide the process into three phases:\\n\\n- **Explore**: Obtain basic system information through initial tool invocations (directory structures, dependencies, etc.)\\n- **Sense**: Generate preliminary architectural blueprints and migration plans based on exploration results\\n- **Respond**: Validate migration plans, generate migration test cases, and produce migration code\\n\\nAdapted for domestic model capabilities, this process would utilize V3 for exploration, R1 for plan design, and V3 for response.\\n\\n### Architecture View-Oriented Tool Design\\n\\nTo help AI better understand system architectures, we designed a series of architecture view-oriented tools.\\n\\n| Tool Name (name)   | Description (desc)                                                                 |\\n|--------------------|-----------------------------------------------------------------------------------|\\n| componentView      | List all UI components in the current project (React, Vue components, etc.)       |\\n| containerView      | List all modules in the current project                                           |\\n| webApiView         | List all Web APIs in the current project                                          |\\n| stylingView        | List all CSS/SCSS classes in the current project                                  |\\n| dir                | Get directory structure of current hierarchy                                      |\\n| history            | Retrieve historical commit information of current file                            |\\n| knowledge          | Analyze API call chains with default depth=2 (unmodifiable), i.e., Controller-to-Repository call chains |\\n\\nNote: Current implementations show DeepSeek still struggles to fully comprehend C4 models, requiring further optimization.\\n\\n### Business Knowledge Extraction and Comprehension\\n\\nFor business logic analysis, we primarily rely on API AST and call chain analysis. First obtain all APIs through `webApiView`, then retrieve API call chains via `knowledge`. Example:\\n\\n```devin\\n/knowledge:GET#/api/blog/*\\n```\\n\\nWith Controller-to-Repository call chains, AI can effectively understand the business logic behind APIs.\\n\\nOf course, this is a simplified example. In practice, AI needs to combine search tools to acquire additional context.\\n\\n## Conclusion\\n\\nAs our research progresses, we will continue refining this solution to achieve better automated migration capabilities.\\n\\nFollow our progress on GitHub: https://github.com/unit-mesh/auto-dev"},{"id":"/2025/01/11/autodev-2-0-preview","metadata":{"permalink":"/en/blog/2025/01/11/autodev-2-0-preview","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2025-01-11-autodev-2-0-preview.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025-01-11-autodev-2-0-preview.md","title":"AutoDev Composer\uff1athe Intellij IDEA Cursor Alternative","description":"A little over two weeks ago, after the release of DeepSeek V3, we introduced multi-file editing capabilities for Shire.","date":"2025-01-11T00:00:00.000Z","tags":[],"readingTime":3.4,"hasTruncateMarker":true,"authors":[],"frontMatter":{"layout":"default","title":"AutoDev Composer\uff1athe Intellij IDEA Cursor Alternative","nav_order":9},"unlisted":false,"prevItem":{"title":"AutoDev Bridge","permalink":"/en/blog/2025/03/06/autodev-bridge"},"nextItem":{"title":"Agent Language - DevIns","permalink":"/en/blog/2024/03/17/autodev-devins-language"}},"content":"A little over two weeks ago, after the release of DeepSeek V3, we introduced multi-file editing capabilities for Shire.\\n\\nFollowing extensive testing, we discovered that DeepSeek V3 performs exceptionally well in programming scenarios,\\nespecially in multi-file editing contexts.\\n\\nThis inspired us to add a new feature\u2014**AutoDev Composer**\u2014to AutoDev, which had long lacked major updates. In\\ndeveloping this feature, we drew inspiration from a number of mature tools:\\n\\n- The impressive **Sketch rendering mechanism** on Shire\\n- Complex **system prompts** from tools like Cursor and WindSurf\\n- The bug-ridden **StreamDiff mode** from Continue\\n- \u2026and more\\n\\nNow, there\u2019s no need to switch to a VSCode-like IDE to craft prompts and then return to IntelliJ IDEA for debugging.\\nWith AutoDev Composer, you can handle everything directly within IntelliJ IDEA.\\n\\nAs an amateur project, we\u2019ve put in a lot of effort to make this happen! \ud83d\ude0a\\n\\nIntroduction paragraph text here.\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n### **Decoding AutoDev Composer System Prompts**\\n\\n#### **Project Context**\\n\\nIn Composer mode, you can still experience our understanding of software engineering and our extensive expertise in\\nsoftware component analysis. Below is the basic contextual prompt for AutoDev Composer:\\n\\n```markdown\\n- The USER\'s OS version is Mac OS X 15.2 x86_64\\n- The absolute path of the USER\'s workspaces is: /Users/phodal/IdeaProjects/untitled\\n- This workspace uses Gradle and Java JDK_11\\n- The user\'s shell is /bin/bash\\n- User\'s workspace context is: This project uses MariaDB 11.5.2-MariaDB, Spring Boot 2.7.10, Spring MVC, and JDBC to\\n  build RESTful APIs.\\n- Current time is: 2025-01-20 11:23:59  \\n```  \\n\\nWe gather system, workspace, toolchain, database, and language environment information to help you work more\\nefficiently. For example, when writing CRUD code, AutoDev generates corresponding code based on your database\\ninformation.\\n\\n---\\n\\n#### **Tool Context**\\n\\nUnlike FunctionTool, we firmly believe that DSLs (Domain-Specific Languages) are the best approach for generative AI\\nsolutions. Therefore, AutoDev adopts a DevIns DSL tool-calling mechanism:\\n\\n```markdown\\n<tool>name: file, desc: Read the content of a file by project relative path, example:  \\n<devin>  \\nLocate a specific file (the file must exist in the specified path)  \\n/file:.github/dependabot.yml#L1C1-L2C12  \\nSearch globally by file name (case-sensitive, no path required)  \\n/file:PythonFrameworkContextProvider.kt  \\n</devin>  \\n```  \\n\\nSince the tool\u2019s documentation is part of the code and test suite, it allows for the generation of precise and reliable\\nprompts.\\n\\n---\\n\\n### **Thought Process**\\n\\nGiven the complexity of the AutoDev DSL tools, we referenced WindSurf\u2019s prompt generation approach and introduced a\\nstep-by-step **thought process**:\\n\\n```markdown\\n# Step 1. Create `routes.py`\\n\\nI\u2019ve created `routes.py` to define the `/upload` and `/query` endpoints. Additionally, I\u2019ve added `/` as the endpoint\\nfor `main.html`.\\n\\n# Step 2. Create `main.js`\\n\\nI\u2019ve created a dedicated `main.js` file to store all the interactive front-end code. It defines UI elements for\\ndisplaying windows and buttons and creates event listeners for these buttons.  \\n```  \\n\\nThis allows us to provide additional examples for the AI model, which has proven to learn remarkably well.\\n\\n---\\n\\n### **AutoDev Developer Experience: Sketch Mode**\\n\\nAlthough AutoDev is now an amateur project, we firmly believe that understanding developer experience is at the core of\\nAI-assisted development. For this reason, we\u2019ve introduced Sketch mode from Shire\u2019s intelligent agent language into\\nAutoDev Composer. With Sketch, you can transform code into *everything*.\\n\\nSimply put, Markdown is rendered with various UIs to enable better interactivity.\\n\\n#### **Diff Sketch Mode**\\n\\nWith Diff Sketch mode, you can quickly understand AI-generated code changes and decide how to handle them: view the\\nsource file, examine the diff, or apply the changes directly.\\n\\nSince we currently lack the capacity to offer a diff model like Cursor, we\u2019ve implemented a repair model. When patches\\ncannot be accurately identified, the model is called again for corrections.\\n\\n#### **Terminal Sketch Mode**\\n\\nIn AutoDev, the Terminal Sketch mode allows you to execute scripts or pop out a terminal (similar to Cursor), enabling\\nyou to run commands and view the results conveniently.\\n\\n#### **Mermaid and PlantUML Sketch Modes**\\n\\nWhen you install the Mermaid or PlantUML plugins, you can use their respective Sketch modes to convert your code into\\nflowcharts, sequence diagrams, and more.\\n\\n---\\n\\n### **Other**\\n\\n**Download and try it out:**  \\n[https://github.com/unit-mesh/auto-dev/releases](https://github.com/unit-mesh/auto-dev/releases)\\n\\n---  \\n`"},{"id":"/2024/03/17/autodev-devins-language","metadata":{"permalink":"/en/blog/2024/03/17/autodev-devins-language","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2024-03-17-autodev-devins-language.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2024-03-17-autodev-devins-language.md","title":"Agent Language - DevIns","description":"In the previous version, we built AutoDev\'s custom Agent functionality, allowing users to create their own intelligent agents through custom capabilities to provide intelligent assistance for software development tasks.","date":"2024-03-17T00:00:00.000Z","tags":[],"readingTime":3.13,"hasTruncateMarker":true,"authors":[],"frontMatter":{"layout":"default","title":"Agent Language - DevIns","nav_order":9},"unlisted":false,"prevItem":{"title":"AutoDev Composer\uff1athe Intellij IDEA Cursor Alternative","permalink":"/en/blog/2025/01/11/autodev-2-0-preview"},"nextItem":{"title":"AutoDev 1.7.0 AutoDev AI Agent","permalink":"/en/blog/2024/03/07/autodev-1-7-0"}},"content":"In the previous version, we built AutoDev\'s custom Agent functionality, allowing users to create their own intelligent agents through custom capabilities to provide intelligent assistance for software development tasks.  \\nIn this version, we are introducing a new AI Agent language: DevIns (Development Instruction). DevIns enables users to describe software development tasks more efficiently while automatically processing content returned from AI Agents.\\n\\nIntroduction paragraph text here.\\n\\n\x3c!-- truncate --\x3e\\n\\nFor example: `/write:README.md\\\\n```\\\\n# Hello, World!```\\\\n\\"` will be translated and executed by AutoDev, writing `# Hello, World!` to the `README.md` file. Additionally, this version of DevIns can execute patches, commit code, and run tests.\\n\\nNote: It was originally named DevIn, but after the Devin AI project released its demo video, we renamed it to DevIns.\\n\\n## Why DevIns?\\n\\nIn the AutoDev project, we achieve intelligent assistance for software development tasks through **context-aware building** and **custom capabilities**, such as automated test generation/execution and UI auto-generation. As we developed more agents in AutoDev, we observed that all interactions with the model occurred through **instruction text**. Users interact with agents via instruction text, and agents return content to operate editors or IDEs.\\n\\nFor instance, in AutoDev\'s custom prompts, we can use: `Explain selected code: $selection` to have AI interpret the selected code, where \\"Explain\\" functions as an instruction.\\n\\nThis led us to consider: Can we interact with agents using **natural language**? Users could describe requirements in natural language, while models could return corresponding instruction text to operate editors/IDEs, thereby automating software development assistance.\\n\\n## What is DevIns Language?\\n\\n> DevIns is an interactive language bridging natural language and instruction text, where natural language describes development tasks and instruction text interacts with agents/IDEs.\\n\\nSimply put, DevIns is an interactive, compilable, and executable textual language. You can use DevIns to describe software development tasks (e.g., code analysis, code generation, test execution), then run it. The DevIns compiler will generate corresponding instruction text based on your commands, send it to agents, and execute operations on editors/IDEs based on returned results.\\n\\nYou can describe requirements in natural language:\\n\\n```devin\\nExplain code /file:src/main/java/com/example/Controller.java\\n```\\n\\nAutoDev will then combine context and compile it into instruction text, reading the `src/main/java/com/example/Controller.java` file contents.\\n\\n### DevIns Agent Commands\\n\\nBeyond basic file reading, code modification, and custom variables, DevIns supports more commands like writing files, running tests, and committing code. Predefined commands enable operations such as:\\n\\n- `/write` manipulates code with path information\\n- `/run` executes corresponding tests\\n- `/patch` applies patches based on AI responses  \\n- `/commit` submits code\\n\\nExample generation content:\\n\\n    /write:src/main/java/com/example/Controller.java#L1-L5\\n    ```java\\n    public class Controller {\\n        public void method() {\\n            System.out.println(\\"Hello, World!\\");\\n        }\\n    }\\n    ```\\n\\nDetails: [https://ide.unitmesh.cc/devins](https://ide.unitmesh.cc/devins)\\n\\nDon\'t worry about command complexity - our extensive IDE development experience enables DevIns to provide \\"extremely\\" powerful interactive capabilities: intelligent completion and hints.\\n\\n### Using DevIns in IDE\\n\\nAfter installing AutoDev 1.7.2 plugin, create a `hello.devins` file to start writing DevIns commands, then click Run. As shown:\\n\\n![AutoDev DevIns](https://unitmesh.cc/auto-dev/autodev-devins.png)\\n\\nIt\'s that simple.\\n\\n## Why the Name DevIns?\\n\\nWhen designing this language weeks ago, we intended the name as \\"AutoDev Input Language\\" (DevIn). We found no similar projects during initial searches. However, as we approached release, the Devin AI project\'s demo video went viral on social media.\\n\\nWTF????\\n\\nGiven the similarity, we renamed it to DevIns (Development Instruction). Renaming involved significant code changes, documentation updates (though minimal), and adjustments for JetBrains marketplace/repositories. Due to JetBrains review mechanisms, the default file extension remains `.devin` (not yet changed to `.devins`) - we simply couldn\'t make all the changes.\\n\\n## Next Steps\\n\\nIn upcoming versions, we plan to:\\n\\n1. Enhance DevIns language-agent interaction (Jupyter Notebook-style?)\\n2. Develop more agents leveraging AutoDev\'s custom Agent capabilities\\n3. Design richer DevIns commands for broader AI-powered development tasks\\n4. Build cross-platform DevIns compiler\\n\\nWe welcome community contributions and suggestions.\\n\\n`"},{"id":"/2024/03/07/autodev-1-7-0","metadata":{"permalink":"/en/blog/2024/03/07/autodev-1-7-0","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2024-03-07-autodev-1-7-0.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2024-03-07-autodev-1-7-0.md","title":"AutoDev 1.7.0 AutoDev AI Agent","description":"In the #51 issue of the open-source AI IDE plugin AutoDev, we designed the AI Agent capability for AutoDev. Half a year later, we have finally delivered this feature.","date":"2024-03-07T00:00:00.000Z","tags":[],"readingTime":2.135,"hasTruncateMarker":true,"authors":[],"frontMatter":{"layout":"default","title":"AutoDev 1.7.0 AutoDev AI Agent","nav_order":8},"unlisted":false,"prevItem":{"title":"Agent Language - DevIns","permalink":"/en/blog/2024/03/17/autodev-devins-language"},"nextItem":{"title":"AutoDev 1.6.4 Enhanced Development Experience for HarmonyOS Applications","permalink":"/en/blog/2024/02/25/autodev-1-6-4"}},"content":"In the [#51](https://github.com/unit-mesh/auto-dev/issues/51) issue of the open-source AI IDE plugin AutoDev, we designed the AI Agent capability for AutoDev. Half a year later, we have finally delivered this feature.\\n\\nIn AutoDev 1.7.0, you can now integrate internal AI Agents and seamlessly combine them with existing AI-assisted capabilities.\\n\\nIntroduction paragraph text here.\\n\\n\x3c!-- truncate --\x3e\\n\\nThis article will demonstrate how to use AutoDev\'s Agent capabilities through a demo combining AI Agents. For details, see the documentation: https://ide.unitmesh.cc/agent/agent.html, or refer to the source code.\\n\\n## Custom AI Agent\\n\\nBackground: As we know, general-purpose large language models lack internal reference materials, requiring RAG extensions. In scenarios where our documentation might be constantly updated, implementing similar functionality directly on the IDE is impractical. Therefore, we should implement such capabilities on the server side and expose interfaces to the IDE.\\n\\nBased on our previous experience with custom LLM implementations, we designed AutoDev\'s custom AI Agent capability to facilitate...\\n\\n## 1. Direct Response Example: Internal API Integration\\n\\nTypical scenarios:\\n- When models lack specific knowledge. For example, when learning HarmonyOS application development, internal APIs can be deployed to accelerate learning.\\n- Internal knowledge. When dealing with extensive domain knowledge, specifications, or API information.\\n\\nIn these scenarios, use `Direct` as the response type to integrate corresponding AI Agents. Configuration example:\\n\\n```json\\n{\\n  \\"name\\": \\"Internal API Integration\\",\\n  \\"url\\": \\"http://127.0.0.1:8765/api/agent/api-market\\",\\n  \\"responseAction\\": \\"Direct\\"\\n}\\n```\\n\\nThis configuration directly returns and processes the content.\\n\\n## 2. Retrieval Result Example: Component Library Integration\\n\\nTypical scenarios:\\n- Knowledge retrieval. When needing specific categories of knowledge for further communication. For example, requiring AI to select appropriate components while possessing all component information for subsequent coding.\\n\\nIn these scenarios, use `TextChunk` as the response type. Configuration example:\\n\\n```json\\n{\\n  \\"name\\": \\"Component Query\\",\\n  \\"url\\": \\"http://127.0.0.1:8765/api/agent/component-list\\",\\n  \\"responseAction\\": \\"TextChunk\\"\\n}\\n```\\n\\nHere, the AI returns search results that can be used for subsequent conversations.\\n\\n## 3. WebView Result Example: Low-code Page Generation\\n\\nTypical scenarios:\\n- Frontend page generation\\n- Low-code page generation\\n\\nThese similar scenarios often require integration with internal component libraries or RAG due to frequent issues in AI-generated frontend code. However, directly generating prototypes through AI for discussion among product managers, UX designers, and developers proves more valuable.\\n\\nIn these scenarios, use `WebView` as the response type. Configuration example:\\n\\n```json\\n{\\n  \\"name\\": \\"Page Generation\\",\\n  \\"url\\": \\"http://127.0.0.1:8765/api/agent/ux\\",\\n  \\"auth\\": {\\n    \\"type\\": \\"Bearer\\",\\n    \\"token\\": \\"eyJhbGci\\"\\n  },\\n  \\"responseAction\\": \\"WebView\\"\\n}\\n```\\n\\nThis configuration returns results in WebView format, which will be displayed in the chat interface.\\n\\n## Summary\\n\\nWithin the IDE, we can treat AI Agents as a series of capability plugins to accelerate our development process."},{"id":"/2024/02/25/autodev-1-6-4","metadata":{"permalink":"/en/blog/2024/02/25/autodev-1-6-4","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2024-02-25-autodev-1-6-4.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2024-02-25-autodev-1-6-4.md","title":"AutoDev 1.6.4 Enhanced Development Experience for HarmonyOS Applications","description":"Generative AI holds tremendous potential in software development and knowledge management, which is why this technology is being increasingly adopted by enterprises. Emerging technologies like the HarmonyOS operating system introduce new concepts, development tools like DevEco Studio, the ArkTS language, and the ArkUI framework. In terms of implementation patterns, its integration with generative AI closely resembles the process of combining AI with enterprise infrastructure.","date":"2024-02-25T00:00:00.000Z","tags":[],"readingTime":3.605,"hasTruncateMarker":false,"authors":[],"frontMatter":{"layout":"default","title":"AutoDev 1.6.4 Enhanced Development Experience for HarmonyOS Applications","nav_order":7},"unlisted":false,"prevItem":{"title":"AutoDev 1.7.0 AutoDev AI Agent","permalink":"/en/blog/2024/03/07/autodev-1-7-0"},"nextItem":{"title":"AutoDev 1.6.0 - Precise Page Generation and SQL Generation","permalink":"/en/blog/2024/01/26/autodev-1-6-0"}},"content":"Generative AI holds tremendous potential in software development and knowledge management, which is why this technology is being increasingly adopted by enterprises. Emerging technologies like the HarmonyOS operating system introduce new concepts, development tools like DevEco Studio, the ArkTS language, and the ArkUI framework. In terms of implementation patterns, its integration with generative AI closely resembles the process of combining AI with enterprise infrastructure.\\n\\nTherefore, we began exploring possibilities in AutoDev to integrate these new knowledge domains while reducing developers\' learning burden.\\n\\nSource code: https://github.com/unit-mesh/auto-dev\\n\\n## Three Experimental Features for HarmonyOS + Generative AI\\n\\nAfter initial discussions with the HarmonyOS team about their self-developed tools, we identified three experimental directions for AutoDev:\\n\\n- Add ArkTS support. ArkTS is an application development language based on TypeScript extensions in the HarmonyOS ecosystem.\\n- Automatic ArkUI page generation. ArkUI is a declarative UI development framework for building distributed application interfaces. It shares similarities with our existing AutoPage feature and can generate code/UI through chain-of-thought reasoning.\\n- UI layout migration. Converting code from other languages/frameworks into HarmonyOS-compatible code using generative AI.\\n\\nAs someone who has studied Gradle, Intellij Community, DevEco Studio source code, and authored \\"Frontend Architecture: From Basics to Micro Frontends\\", I possess relevant experience with TypeScript, ArkUI, and declarative UIs. Thus, I confidently embarked on developing new AutoDev features - only to encounter numerous challenges.\\n\\n## 1. AI Support for ArkTS Language\\n\\nAfter installing DevEco Studio, I discovered AutoDev didn\'t support TypeScript??? After testing in WebStorm, I realized the IDE difference. Using the PSIViewer plugin, I found DevEco Studio implements its own JavaScript/TypeScript PSI, e.g., `com.huawei.ace.language.psi.impl.JavaScriptIdentifierNameImpl`.\\n\\nThe reasons are apparent:\\n- The JavaScript plugin for IntelliJ platform is proprietary.\\n- Extending TypeScript syntax directly would be simpler than creating a new language.\\n\\nThus, DevEco Studio developed custom JavaScript/TypeScript modules supporting syntax highlighting, code completion, and formatting. It also introduced the ArkTS language as a TypeScript extension.\\n\\nThis means three new file types appear in DevEco Studio + AutoDev:\\n- Huawei JavaScript\\n- Huawei TypeScript\\n- Huawei ArkTS\\n\\nHeadache...\\n\\nOur solution in AutoDev involves preliminary abstraction based on standard PSI to support documentation generation. A more robust approach would require:\\n1. Reusing JavaScript PSI through reflection\\n2. Integrating DevEco Studio\'s JavaScript support\\n\\nConsidering debugging complexity and existing xxStudio code references, we temporarily abandoned this approach - assuming HarmonyOS IDEs will eventually provide their own AI capabilities.\\n\\n## 2. AutoArkUI: RAG-enhanced ArkUI Code Generation\\n\\n> ArkUI is a declarative UI development framework for building distributed application interfaces.\\n\\nCompared with ArkTS, integrating ArkUI presents more complexity. The current version focuses on generating pages using classic UI elements:\\n- Layouts: Row, Column, Stack, Flex, etc.\\n- Components: Button, Radio, Toggle, etc.\\n\\nSince ChatGPT lacks knowledge of HarmonyOS updates, we adopted a two-step generation approach similar to AutoPage:\\n1. Analyze user requirements to select appropriate layouts and components\\n2. Generate corresponding ArkUI code based on detailed layout/component information\\n\\nThis process constitutes AutoDev\'s AutoArkUI feature. The step 1 prompt example:\\n- User: // maybe send Android Layout code, maybe some requirements\\n- Your Answer: [FlexLayout, Button, CheckBox, Checkbox, Button]\\n\\nConsidering programming DSLs\' sensitivity to natural language, we use English prompts to avoid generating Chinese DSLs.\\n\\n## 3. Migrating Android/iOS/Mini-Program Applications\\n\\nGenerative AI demonstrates excellent code translation capabilities, as seen in IBM\'s COBOL-to-Java conversions and AutoDev\'s legacy system modernization features. \\n\\nWe\'ve implemented layout migration support in AutoDev, though current limitations exist:\\n- Android layout conversion often produces errors\\n- Need for better static code analysis integration\\n- Merged functionality with AutoArkUI requires refinement\\n\\n## 4. RAG-enhanced Chat Context: C++ NAPI etc.\\n\\nThrough experimentation, we observed ChatGPT\'s lack of HarmonyOS knowledge. Thus, we implemented HarmonyOS-specific context in AutoDev 1.6.4:\\n- Basic declaration: `This project is a HarmonyOS project.`\\n- Language-specific contexts:\\n  - TypeScript/ArkTS: \\"Uses Flutter-like declarative UI framework\\"\\n  - C++: \\"Uses NAPI for building native Addons\\"\\n\\nThis helps guide AI:\\n- For frontend code: Consider Flutter-like declarative UI patterns\\n- For native code: Consider NAPI-based plugin architecture\\n\\nThese contexts are based on preliminary understanding and require refinement.\\n\\n## Future Directions\\n\\nCurrent limitations (implemented within hours):\\n- Android layout conversion inaccuracies\\n- Hardcoded component/layout information\\n- Lack of dynamically generated sample codes\\n- Incomplete C++ support\\n- Mini-program platform conversions\\n\\nAs I\'m not an expert in Android/mini-program migration to HarmonyOS, challenges remain. Future improvements depend on motivation to develop more interesting features."},{"id":"/2024/01/26/autodev-1-6-0","metadata":{"permalink":"/en/blog/2024/01/26/autodev-1-6-0","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2024-01-26-autodev-1-6-0.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2024-01-26-autodev-1-6-0.md","title":"AutoDev 1.6.0 - Precise Page Generation and SQL Generation","description":"Introduction paragraph text here.","date":"2024-01-26T00:00:00.000Z","tags":[],"readingTime":0.465,"hasTruncateMarker":true,"authors":[],"frontMatter":{"layout":"default","title":"AutoDev 1.6.0 - Precise Page Generation and SQL Generation","nav_order":6},"unlisted":false,"prevItem":{"title":"AutoDev 1.6.4 Enhanced Development Experience for HarmonyOS Applications","permalink":"/en/blog/2024/02/25/autodev-1-6-4"},"nextItem":{"title":"AutoDev 1.5.3 Precision Test Generation","permalink":"/en/blog/2024/01/12/autodev-1-5-3"}},"content":"Introduction paragraph text here.\\n\\n\x3c!-- truncate --\x3e\\n\\n## AutoPage: Precise Page Generation\\n\\nIn version 1.6.0, we introduce precise page generation capabilities specifically for the React framework. When generating pages, the system now produces corresponding page components based on contextual requirements.\\n\\nFor details, see: https://ide.unitmesh.cc/workflow/auto-page.html\\n\\n## AutoSQL: Precise SQL Generation\\n\\nIn version 1.6.0, we provide precise SQL generation capabilities. When generating SQL statements, the system now produces corresponding SQL queries based on contextual requirements.\\n\\nFor details, see: https://ide.unitmesh.cc/workflow/auto-sql.html\\n\\n## Prompt Override\\n\\nThe Prompt Override feature allows customizing your own prompts. For details, see: https://ide.unitmesh.cc/customize/prompt-override.html"},{"id":"/2024/01/12/autodev-1-5-3","metadata":{"permalink":"/en/blog/2024/01/12/autodev-1-5-3","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2024-01-12-autodev-1-5-3.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2024-01-12-autodev-1-5-3.md","title":"AutoDev 1.5.3 Precision Test Generation","description":"At the beginning of last year, our original intention for open-sourcing AutoDev was:","date":"2024-01-12T00:00:00.000Z","tags":[],"readingTime":2.69,"hasTruncateMarker":false,"authors":[],"frontMatter":{"layout":"default","title":"AutoDev 1.5.3 Precision Test Generation","nav_order":5},"unlisted":false,"prevItem":{"title":"AutoDev 1.6.0 - Precise Page Generation and SQL Generation","permalink":"/en/blog/2024/01/26/autodev-1-6-0"},"nextItem":{"title":"AutoDev Coder","permalink":"/en/blog/autodev-coder"}},"content":"At the beginning of last year, our original intention for open-sourcing AutoDev was:\\n\\n> AutoDev is an open-source AI-assisted programming plugin for JetBrains IDEs. It can directly integrate with your requirement management systems (such as Jira, Trello, Github Issues, etc.). Within the IDE, with simple clicks, AutoDev automatically generates code based on your requirements. All you need to do is perform quality checks on the generated code. @\\n\\nToday we\'ve taken another step toward this goal: one-click generation of precision unit tests. In this article, we\'ll introduce features from version 1.4 (Team AI for teams) to version 1.5.3:\\n\\n- **Precision automated test generation**. Enhanced static code analysis for more accurate constructor generation; optimized prompts distinguishing testing approaches for Spring Controllers vs Services; added multiple test template types.\\n- **Local model enhancements**. Provided AutoDev Coder dataset and models tailored for AutoDev; supported local data recording for knowledge distillation; allowed partial system prompt overriding for better custom model utilization.\\n- **Multi-language documentation**. Added support for JavaScript, Rust, Python, and improved Kotlin documentation generation logic.\\n- **Automation workflow optimization**. Introduced PrePush Review for AI-assisted code review before commit; streamlined commit message context with differentiated file/dependency change handling to reduce token usage.\\n\\nJoin us at: https://github.com/unit-mesh/auto-dev/ to build your own AI-assisted full-cycle coding companion.\\n\\nDuring development, we selected ArchGuard - an open-source architecture governance platform built with Kotlin - as the pilot project for AutoDev\'s full-cycle AI assistance, continuously accumulating data and experience to better support Kotlin development.\\n\\n## 1. Precision Test Generation\\n\\nDrawing from experience generating 200+ tests across 90 test classes in ArchGuard, we\'ve continuously optimized test generation logic (though some bugs may remain).\\n\\nAutoDev can now **directly generate** ready-to-use unit tests with certain probability.\\n\\n### Precise Context\\n\\nCurrent version provides test context containing:\\n- Related class information\\n- Complete input/output class details\\n- Static analysis of Service-related information\\n- Function parameter/return type analysis\\n- Spring component detection (Controller/Service) with testing rule suggestions\\n\\nSee implementations: `JavaTestContextProvider`, `KotlinTestContextProvider`\\n\\n### Unit Test Templates: Team AI\\n\\nTo handle project-specific requirements (like special annotations in ArchGuard), we introduced customizable test templates for Controllers, Services, and other components. Manage templates through prompt-as-code approach and share within teams.\\n\\nDocumentation: https://ide.unitmesh.cc/customize/custom-test-template.html\\n\\n### Accurate API Test Data Generation\\n\\nEnhanced static analysis for API test data generation through `JavaTestDataBuilder` and `KotlinTestDataBuilder`.\\n\\n## 2. Local Model Optimization\\n\\nConfigure private model settings via `AutoDev Coder` in plugin preferences:\\n\\n### Public Model Knowledge Distillation\\n\\nNew `Recording Instruction In Local` feature enables:\\n- Recording AI interaction data\\n- Internal model fine-tuning samples\\n- AutoDev debugging support\\n\\n### Plugin Prompt Overriding\\n\\nOverride core chat prompts:\\n- Explain code\\n- Refactor code\\n- Fix issue \\n- Generate test\\n\\nMore context interfaces coming via template approach.\\n\\n## 3. Multi-Language Documentation\\n\\nAdded documentation generation support for:\\n- Python\\n- Rust\\n- JavaScript\\n\\nOptimized Kotlin handling to prevent redundant function comments from OpenAI.\\n\\n## 4. Automation Workflow Optimization\\n\\n### PrePush Review\\n\\nAI-assisted preliminary code review before commit.\\n\\n### Streamlined Commit Messages\\n\\nRefined commit message generation through 167 real-world cases in ArchGuard, implementing token-efficient context handling.\\n\\n## Future Focus\\n\\n- **Enhanced workflow automation**: Better forward/backward process integration\\n- **UX improvements**: Loading states and error handling upgrades\\n- **Test coverage expansion**: Adding more unit tests for stability\\n\\nContribute at: https://github.com/unit-mesh/auto-dev/"},{"id":"autodev-coder","metadata":{"permalink":"/en/blog/autodev-coder","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2024-01-07-autodev-coder.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2024-01-07-autodev-coder.md","title":"AutoDev Coder","description":"TL;DR:","date":"2024-01-07T00:00:00.000Z","tags":[],"readingTime":1.71,"hasTruncateMarker":false,"authors":[],"frontMatter":{"layout":"default","title":"AutoDev Coder","slug":"autodev-coder"},"unlisted":false,"prevItem":{"title":"AutoDev 1.5.3 Precision Test Generation","permalink":"/en/blog/2024/01/12/autodev-1-5-3"},"nextItem":{"title":"AutoDev 1.4 Scaling AI-Assisted Development","permalink":"/en/blog/2023/10/22/autodev-1-4-0"}},"content":"TL;DR:\\n\\nThe first **barely usable** version of AutoDev Coder 6.7B, a coding LLM for AutoDev, is now available.\\n\\n- HuggingFace homepage: [https://huggingface.co/unit-mesh](https://huggingface.co/unit-mesh/autodev-coder) (temporarily unable to provide direct downloads due to certification requirements \ud83d\udc36\ud83d\udc36).\\n- Dataset download: https://huggingface.co/datasets/unit-mesh/autodev-datasets\\n\\nPS: Since AutoDev 1.5.1 is awaiting approval on the JetBrains Marketplace and foreign colleagues are still on vacation after holidays, the model\'s performance on version 1.5.1 will be **slightly** better than on 1.5.0.\\n\\nAdditionally, with improved computing power support and better completion testing, we will reintroduce the original Inlay completion mode.\\n\\n## AutoDev Coder 6.7B v1 Experimental Version\\n\\nCurrent version is fine-tuned based on DeepSeek Coder 6.7b instruct model under LLaMA architecture.\\n\\nNote: As an experimental version, its primary purpose is to align the model, data tools, and IDE plugin for better coordination. Generation quality still requires further improvement.\\n\\n## AutoDev Coder 64k Dataset\\n\\nThe instruction composition of AutoDev Coder v1 64k is as follows:\\n\\n| Filename                                | Selected Instructions |\\n|----------------------------------------|-----------------------|\\n| java_oss.jsonl                         | 4000                  |\\n| python_oss.jsonl                       | 4000                  |\\n| code_bugfix_cleaned_5K.json            | 4000                  |\\n| codeGPT_CN_cleaned_20K.json            | 15000                 |\\n| code_summarization_CN_cleaned_10K.json | 8000                  |\\n| code_generation_CN_cleaned_5K.json     | 4000                  |\\n| summary.jsonl                          | 25000                 |\\n\\nThe summary.jsonl is generated by our open-source code fine-tuning data framework UnitGen (https://github.com/unit-mesh/unit-gen).\\n\\nWe selected dozens of Java and Kotlin open-source projects, generating instructions based on AutoDev plugin requirements, mainly categorized into three types:\\n\\n- Completion (inline, interline, interblock)\\n- Documentation generation\\n- Comment generation\\n\\nDetailed documentation can be found in the UnitGen project: https://github.com/unit-mesh/unit-gen.\\n\\n## FAQ: AutoDev Coder Model Evaluation\\n\\nStill under design. Since we need to combine AutoDev instructions with languages like Java, Kotlin, TypeScript rather than the Python-centric systems commonly used in open-source models, we need to rethink our evaluation approach.\\n\\nInitially, we used instruction sets like OSS Instruct to supplement natural language to code generation, but found ~50,000 instructions (about 50%) were Python-related. After filtering, only ~5,000 Java instructions remained, which showed suboptimal results in AutoDev.\\n\\n## FAQ: AutoDev Instructions\\n\\nAutoDev employs contextual strategies that differ from other tools in instruction handling. Details: https://github.com/unit-mesh/auto-dev"},{"id":"/2023/10/22/autodev-1-4-0","metadata":{"permalink":"/en/blog/2023/10/22/autodev-1-4-0","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2023-10-22-autodev-1-4-0.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-10-22-autodev-1-4-0.md","title":"AutoDev 1.4 Scaling AI-Assisted Development","description":"Over the past two months, as Thoughtworks rolled out large-scale AI-assisted software delivery (AI4SoftwareDelivery) internally - involving thousands of Thoughtworkers across different roles and regions globally, along with dozens of internal sharing sessions.","date":"2023-10-22T00:00:00.000Z","tags":[],"readingTime":3.645,"hasTruncateMarker":false,"authors":[],"frontMatter":{"layout":"default","title":"AutoDev 1.4 Scaling AI-Assisted Development"},"unlisted":false,"prevItem":{"title":"AutoDev Coder","permalink":"/en/blog/autodev-coder"},"nextItem":{"title":"AutoDev 1.0","permalink":"/en/blog/autodev-1-0-0"}},"content":"Over the past two months, as Thoughtworks rolled out large-scale AI-assisted software delivery (AI4SoftwareDelivery) internally - involving thousands of Thoughtworkers across different roles and regions globally, along with dozens of internal sharing sessions.\\n\\nWe\'ve incorporated more new features into AutoDev to continuously explore how to better assist teams in improving efficiency within IDEs. As the current best open-source AI-assisted programming tool in China, we\'ve introduced several interesting features in AutoDev 1.4.0 to explore scalable AI-driven development efficiency improvements.\\n\\nAutoDev GitHub: https://github.com/unit-mesh/auto-dev\\n\\n## Team Prompts: Codified Prompts for Team Dissemination\\n\\nResponding to our colleagues\' enthusiasm for TDD (Test-Driven Development), specifically the #49 issue requesting \\"Support TDD mode to generate implementations based on specified tests\\", we developed the Team Prompts feature. Now you can directly write prompts in your code repository, and AutoDev will read these prompts to enhance AI-assisted functionality.\\n\\n![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/ba3432d7-a5ac-428b-9d05-6d088dd5940a/5cecc645-e9fd-466a-8adc-2f69b15299e3/Untitled.png)\\n\\nThis means:\\n\\n- Share prompts across teams rather than maintaining personalized configurations\\n- Different teams within your organization can share their AI experiences\\n- No need for custom IDE requirements - just provide interface capabilities\\n\\n### Team Prompts Example\\n\\nLet\'s look at a simple example. First create (or configure) a Prompt directory in your repository, then write your prompts. For TDD scenarios:\\n\\n- Tasking.vm: Split requirements into test cases\\n- TDD-Red.vm: Write the first failing test based on generated test cases\\n- TDD-Green.vm: Implement code to pass the test\\n- TDD-Refactor.vm: Refactor the implementation\\n\\nIn these prompt files, simply use AutoDev\'s configuration to introduce context variables (reference: https://ide.unitmesh.cc/variables). Example:\\n\\n```\\n---\\npriority: 2023\\ninteraction: ChatPanel\\n---\\n```user```\\n\\nYou are a senior software engineer skilled in TDD. Improve existing implementations based on new test cases.\\n\\nOriginal implementation code: $context.underTestFileCode($methodName)\\n\\nNew test code:\\n\\n${selection}\\n\\nOptimize the class under test based on new tests. Return method code using ``` to start your code block:\\n```\\n\\nThe YAML FrontMatter at the beginning provides simple configurations:\\n- `priority` determines menu ordering\\n- `interaction` controls output behavior:\\n  - `ChatPanel` displays in right-side chat window\\n  - `AppendCursorStream` streams output in current document with typewriter effect\\n\\nContext provides built-in system functions for extended capabilities.\\n\\n### Team Prompts vs Custom Prompt\\n\\nAutoDev 1.1 introduced Custom Prompt for personal configurations, while Team Prompts offers unified team configurations. This allows creating scenario-specific AI instructions for rapid team sharing.\\n\\nWe will continue evolving Team Prompts for better usability.\\n\\n## Custom Living Documentation: Continuously Supporting Legacy System Refactoring\\n\\nCompared to conventional documentation generation, we find it more meaningful to generate code annotations that assist system refactoring.\\n\\n### AutoDev Documentation Generation\\n\\nInspired by JetBrains AI Assistant\'s documentation features, we added similar functionality in AutoDev. While initially considered symbolic, it proved valuable when documenting Chocolate Factory - simply select a class/method/variable, right-click or press Alt+Enter to generate documentation. Existing documentation will be updated based on current code (when AI permits).\\n\\nFor SDK development, we recommend adopting the Documentation Engineering approach described in [Developer Experience: Exploration and Reshaping](https://dx.phodal.com/docs/patterns/document-engineering.html), as implemented in Chocolate Factory where tests and comments generate reliable documentation.\\n\\n### Custom Living Documentation Generation\\n\\nBased on experience with legacy system refactoring tools and large insurance company cases, generating annotation-style documentation directly from code significantly reduces reading costs. Combining existing code with new documentation enables better RAG capabilities for extracting meaningful knowledge from code.\\n\\nIn AutoDev, simply add examples to guide LLM documentation generation:\\n\\n```json\\n\\"documentations\\": [\\n    {\\n        \\"title\\": \\"Living Documentation\\",\\n        \\"prompt\\": \\"Generate Living Documentation in the following format:\\",\\n        \\"start\\": \\"\\",\\n        \\"end\\": \\"\\",\\n        \\"type\\": \\"annotated\\",\\n        \\"example\\": {\\n        \\"question\\": \\"...\\",\\n        \\"answer\\": \\"...\\"\\n    }\\n}\\n```\\n\\nCustomize annotation formats for different scenarios, including Swagger annotations for API documentation.\\n\\n## Code Review\\n\\nAs discussed in our previous article [AIGC Reshaping Software Engineering: Code Review](https://www.phodal.com/blog/llm-empowered-software-engineering-code-review/), we combine AutoDev with DevOps platforms for code reviews.\\n\\n### IDE-Side Code Review Best Practices\\n\\nFor IDE-side reviews, we recommend focusing on business context understanding combined with syntax checks. Our design follows common workflows - reviewing multiple commits (e.g., all commits for a requirement) or historical changes of single files.\\n\\n### Requirement System-Integrated Code Review\\n\\nFor teams using AIGC efficiency tools, most already have mature DevOps practices like including requirement IDs in commit messages, e.g., `feat(devops): init first review command #8`.\\n\\nAutoDev can retrieve requirement system information using this ID (8 in example) to supplement business context for LLM analysis.\\n\\n## Conclusion\\n\\nAs an open-source project, we still have many areas for improvement. Please submit issues on GitHub: https://github.com/unit-mesh/auto-dev if you encounter any problems."},{"id":"autodev-1-0-0","metadata":{"permalink":"/en/blog/autodev-1-0-0","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2023-08-06-autodev-1-0-0.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-08-06-autodev-1-0-0.md","title":"AutoDev 1.0","description":"In April, through the article \\"AutoDev","date":"2023-08-06T00:00:00.000Z","tags":[],"readingTime":3.82,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"AutoDev 1.0","Released":"Full-Process AI-Assisted Programming","slug":"autodev-1-0-0"},"unlisted":false,"prevItem":{"title":"AutoDev 1.4 Scaling AI-Assisted Development","permalink":"/en/blog/2023/10/22/autodev-1-4-0"},"nextItem":{"title":"AutoDev 0.7.0 - Generating Standardized Code, Deep Integration into Developer Daily Work","permalink":"/en/blog/autodev-0-7-0"}},"content":"In April, through the article **\\"AutoDev: AI Breaks Through R&D Efficiency, Exploring New Opportunities in Platform Engineering\\"**, we outlined the initial impact of AI on software development. We established several fundamental assumptions:\\n\\n- Large and medium-sized enterprises will **possess at least one** proprietary large language model.\\n- Only end-to-end tools can achieve quality and efficiency improvements through AI.\\n\\nBased on these assumptions, we began building AutoDev and open-sourced it. I\'ve also documented all development insights on my blog, hoping to assist domestic enterprises in establishing their own AI-assisted programming capabilities.\\n\\nAs an open-source project, let\'s start with the GitHub address: https://github.com/unit-mesh/auto-dev.\\n\\n## Designing Three Assistance Modes Around Developer Experience\\n\\nInitially, I didn\'t have a clear development blueprint. As a daily code-writing \\"expert-level\\" programmer, I built features based on my immediate needs.\\n\\nSubsequently, I categorized all features into three assistance modes:\\n\\n- Chat Mode\\n- Copilot Mode\\n- Completion Mode\\n\\n### Auto Mode: Standardized Code Generation\\n\\nTrigger method: All auto modes are under Context Actions, activated using the universal shortcut: **\u2325\u23ce** (macOS) or **Alt+Enter** (Windows/Linux).\\n\\nDesign philosophy: Similar to the one-click pattern we designed in ClickPrompt. Code shouldn\'t be like various flashy demos online - it must consider existing team conventions, otherwise generated code remains unusable. Focusing on configurability and implicit knowledge scenarios, we implemented three Auto scenarios:\\n\\n1. **Auto CRUD**: Reads requirements from issue systems, uses a manually coded agent for continuous interaction to find suitable controllers, modify methods, add new methods, etc. Currently supports Kotlin and JavaScript.\\n2. **Auto Test Generation**: Generates and automatically runs tests for selected classes/methods (when RunConfiguration is appropriate). Supports JavaScript, Kotlin, and Java.\\n3. **Auto Code Completion**: Context-aware code filling. Capabilities vary by language due to limited resources: \\n   - Java: Incorporates **code specifications**\\n   - Kotlin/Java: Adds parameter/return type classes as context\\n   - Other languages: Uses similarity algorithms (no questions about inspiration sources) comparable to GitHub Copilot and JetBrains AI Assistant\\n\\nEach auto mode includes automated context preparation. The following image shows **visible** context for code completion:\\n\\n![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4896c2bb-7356-4d15-a7d8-344e61b7b8db/Untitled.png)\\n\\nThis context combines configured specifications with BlogController-related fields, parameters, return types (e.g., BlogService), etc.\\n\\nAdditionally, hidden contexts exist, such as language declarations in AutoDev configurations:\\n\\n```kotlin\\nYou MUST Use \u4e2d\u6587 to return your answer !\\n```\\n\\nInterestingly, with just two \\"\u4e2d\u6587\\" mentions, there\'s about 50% chance of non-compliance. Considering adding three repetitions.\\n\\n### Companion Mode: Daily Workflow Integration\\n\\nWhen designing companion mode, we referenced existing tools like AI Commit while addressing personal needs.\\n\\nSince companion modes require waiting for LLM responses, they\'re grouped under `AutoDev Chat`. \\n\\nHowever, JetBrains AI Assistant has become AutoDev\'s main competitor (and reference) since its release. Features like \\"Explain with AI\\" and \\"Explain error message with AI\\" demonstrate excellent UX - areas where we still have room for improvement.\\n\\nIn AutoDev, you can:\\n- Generate commit messages\\n- Create release notes\\n- Explain code\\n- Refactor code\\n- ...and even generate DDL directly\\n\\n### Chat Mode: A Peripheral Feature\\n\\nAfter UI redesign (inspired by JetBrains\' approach, given their limited China support), we implemented one-click chat via Context Actions (see Figure 1).\\n\\nChat freely here.\\n\\n## Reflections on LLM as Copilot\\n\\nCurrently, LLMs serve as Copilots. They won\'t replace software engineering specialization but enhance professional capabilities through AI-assisted tools, impacting individual workflows.\\n\\nThey should address **\\"tasks I avoid\\"** and **\\"repetitive tasks\\"** - writing tests, coding, resolving issues, commits, etc. As programmers, we should focus on creative design.\\n\\nAutoDev focuses on: How can AI better assist human work while keeping engineers within their IDEs?\\n\\nThe LLM as Copilot concept will see increasing tool refinement. As seasoned AI application engineers, we\'re contemplating how **LLM as Co-Integrator** can truly boost efficiency.\\n\\n## FAQ\\n\\n### How to Integrate Domestic/Private LLMs?\\n\\nWe provide a Custom LLM Server Python interface example in the source code. Due to limited resources, we\'ve only tested with internally deployed ChatGLM2. For other needs, please discuss via GitHub issues.\\n\\n### Why Only Intellij Version?\\n\\nAs someone experienced in developing new language plugins, contributing to Intellij Community/Android Studio source code, and optimizing Harmony OS IDE architecture, I specialize in JetBrains IDE development.\\n\\n### When Will VS Code Version Arrive?\\n\\nShort answer: Not soon.\\n\\nThough I\'ve studied VS Code/X Editor source code:\\n1. VS Code lacks critical IDE interfaces\\n2. Implementation challenges:\\n   - TextMate-based tokenization (unreliable Oniguruma regex)\\n   - Limited LSP implementation references\\n3. No quality reference implementations\\n\\nThe ideal approach would be GitHub Copilot-style IDE-agnostic Agent mechanisms with TreeSitter for language processing.\\n\\n## Additional Notes\\n\\nAutoDev positions LLMs as developer Copilots, providing assistance tools to handle tedious tasks, enabling engineers to focus on creative design and problem-solving."},{"id":"autodev-0-7-0","metadata":{"permalink":"/en/blog/autodev-0-7-0","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2023-07-23-autodev-0-7-0.mdx","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-07-23-autodev-0-7-0.mdx","title":"AutoDev 0.7.0 - Generating Standardized Code, Deep Integration into Developer Daily Work","description":"Months ago, we embarked on exploring","date":"2023-07-23T00:00:00.000Z","tags":[],"readingTime":4.495,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"AutoDev 0.7.0 - Generating Standardized Code, Deep Integration into Developer Daily Work","slug":"autodev-0-7-0","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"AutoDev 1.0","permalink":"/en/blog/autodev-1-0-0"},"nextItem":{"title":"AutoDev\uff1aAI \u7a81\u7834\u7814\u53d1\u6548\u80fd\uff0c\u63a2\u7d22\u5e73\u53f0\u5de5\u7a0b\u65b0\u673a\u9047","permalink":"/en/blog/2023/04/18/autodev"}},"content":"Months ago, we embarked on exploring: **How to combine AIGC for R&D efficiency improvement?** We open-sourced AutoDev, as introduced on GitHub:\\n\\n> AutoDev is a LLM/AI-assisted programming plugin for JetBrains IDEs. AutoDev can directly integrate with your requirement management systems (e.g., Jira, Trello, Github Issues, etc.). Within the IDE, with simple clicks, AutoDev automatically generates code based on your requirements. All you need to do is perform quality checks on the generated code.\\n\\nThrough our exploration of LLM capability boundaries, we discovered some more interesting patterns that have been incorporated into AutoDev.\\n\\nPS: Search for `AutoDev` in JetBrains plugins and install it. Configure your LLM (e.g., OpenAI and its proxies, open-source LLMs, etc.) to start using.\\n\\n## WHY AutoDev? Understanding the Integration of GenAI + Software Development\\n\\nRegarding generative AI, we maintain views similar to our previous sharing:\\n\\n1. GenAI can improve efficiency in almost every phase of the R&D process.\\n2. More effective for standardized processes, with limited benefits for less standardized small teams.\\n3. Efficiency gains need tool implementation due to the time cost of prompt writing.\\n\\nTherefore, when designing AutoDev, our goals were:\\n\\n1. End-to-end integration to reduce interaction costs - from prompt writing to LLM interaction, then copying back into tools.\\n2. Automatic collection of prompt context for content/code generation\\n3. Final human verification and correction of AI-generated code.\\n\\nThus, manual specification organization and automatic context collection to improve generation quality became our focus in tool development.\\n\\n## AutoDev 0.7 New Features\\n\\nFrom the big demo in April to the new version today, we continuously studied implementations of GitHub Copilot, JetBrains AI Assistant, Cursor, Bloop, etc. Each tool has unique selling points. Combined with my daily development habits, we added a series of exploratory new features.\\n\\nDetails on GitHub: https://github.com/unit-mesh/auto-dev\\n\\n### Feature 1: Built-in Architectural Specifications & **Code Standards**\\n\\nLLM\'s \\"parrot mode\\" (generation mechanism) produces code matching current context programming habits. When using AI code generation features like GitHub Copilot, it generates new API code based on how we handle existing APIs. If our code uses Swagger annotations, it will generate similar code in the same Controller.\\n\\nThis implies a problem: If predecessors wrote non-standard code, generated code will also be non-standard. Therefore, we added CRUD template code specification configuration:\\n\\n```json\\n{\\n  \\"spec\\": {\\n    \\"controller\\": \\"- Use BeanUtils.copyProperties for DTO to Entity conversion in Controllers\\",\\n    \\"service\\": \\"- Service layer should use constructor injection or setter injection, avoid @Autowired annotation\\",\\n    \\"entity\\": \\"- Entity classes should use JPA annotations for database mapping\\",\\n    \\"repository\\": \\"- Repository interfaces should extend JpaRepository for basic CRUD operations\\",\\n    \\"ddl\\": \\"- Fields should use NOT NULL constraints to ensure data integrity\\"\\n  }\\n}\\n```\\n\\nIn special scenarios, specifications alone are insufficient - sample code configuration is needed. With this configuration, when generating Controller/Service code, we can directly apply these specifications.\\n\\n### Feature 2: Deep Integration into Developer Daily Activities\\n\\nIn the April release, AutoDev integrated basic programming activities: AI code completion, comment generation, code refactoring, code explanation, etc.\\n\\nWhile developing AutoDev itself, we discovered more interesting needs and integrated them into the IDE:\\n\\n- One-click commit message generation. When using IDEA\'s commit UI, generate suggested commit messages.\\n- One-click changelog generation. Select multiple commits in history to generate CHANGELOG based on messages.\\n- Error message analysis. During debugging, select error messages to automatically analyze with LLM combining error context.\\n- Test code generation.\\n\\nCombined with AutoDev\'s core strength of automatic CRUD from requirements, the feature set becomes more comprehensive.\\n\\n### Feature 3: **Multi-language AI Support**\\n\\nIn April, we found LLMs excel at CRUD, so chose Java for initial implementation. However, languages I frequently use like Kotlin/Rust/TypeScript lacked support.\\n\\nReferencing Intellij Rust\'s modular architecture, we reorganized layers/modules using Intellij Plugin extension points (XML + Java) to rebuild the foundation.\\n\\nNew extension points in the architecture:\\n\\n- Language data structure extensions. Originally designed for UML representation when tokens are limited. Later referenced (copied) JetBrains AI Assistant\'s language extensions - language-specific data structures implemented in their own modules.\\n- Language prompt extensions. Language-specific prompt differences moved to respective modules.\\n- Custom CRUD workflows. Existing CRUD implementation was Java-specific. Now each language implements its own approach.\\n\\nCurrently, Java/Kotlin still have the best support.\\n\\n### Feature 4: Broader LLM Support\\n\\nAutoDev\'s original design considered our second hypothesis: Every major company will launch its own LLM. Each LLM has unique characteristics, requiring broader LLM support.\\n\\n- OpenAI & proxies. Most tested and complete implementation.\\n- Azure OpenAI. As a legal OpenAI channel in China, we implemented preliminary support and gradually improved it.\\n- Other LLMs. While suitable domestic LLM APIs haven\'t been found yet, the interface supports such integration.\\n\\nWelcome to experiment with your own LLMs.\\n\\n### Feature 5: Smarter Prompt Strategies\\n\\nIn our May article **[Context Engineering: Real-time Capability Analysis Based on GitHub Copilot](https://www.phodal.com/blog/llm-context-engineering/)**, we analyzed GitHub Copilot\'s prompt strategies. Core promptElements include: `BeforeCursor`, `AfterCursor`, `SimilarFile`, `ImportedFile`, `LanguageMarker`, `PathMarker`, `RetrievalSnippet`, etc.\\n\\nDiscovering JetBrains AI Assistant uses similar approaches, we refined AutoDev\'s prompt strategies:\\n\\n- Code context strategies:\\n    - Java + CRUD mode: Build context using related code (BeforeCursor), all called methods, called lines, UML-like class diagrams.\\n    - Other Java modes: Use DtModel to build UML-like comments as reference.\\n    - Python: Use import-based similar code snippets as LLM reference.\\n- Token allocation strategy: Distribute context based on token limits.\\n\\nAs a \\"smart context\\" strategy, current implementation still needs optimization.\\n\\n## Others\\n\\nFeel free to discuss code on GitHub: https://github.com/unit-mesh/auto-dev."},{"id":"/2023/04/18/autodev","metadata":{"permalink":"/en/blog/2023/04/18/autodev","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2023-04-18-autodev.mdx","source":"@site/blog/2023-04-18-autodev.mdx","title":"AutoDev\uff1aAI \u7a81\u7834\u7814\u53d1\u6548\u80fd\uff0c\u63a2\u7d22\u5e73\u53f0\u5de5\u7a0b\u65b0\u673a\u9047","description":"\u56f4\u7ed5\u4e8e\u63a2\u7d22 AI \u5bf9\u8f6f\u4ef6\u7814\u53d1\u7684\u5f71\u54cd\uff0c\u5e76\u5728\u6709\u4e86 LLM \u5fae\u8c03\u5de5\u7a0b\u5316\u80fd\u529b\u4e4b\u540e\uff0c\u6211\u4eec\u4e0a\u5468\u672b\u53c8\u5f00\u6e90\u4e86\u4e00\u4e2a\u9002\u7528\u4e8e AI \u7814\u53d1\u63d0\u6548\u7684\u5de5\u5177\uff1aAutoDev\u3002\u5982\u6b64\u4e00\u6765\uff0c\u6211\u4eec\u4fbf\u6784\u5efa\u4e86\u63a5\u8fd1\u5b8c\u6574\u7684 AI \u5728\u7814\u53d1\u6548\u80fd\u63d0\u5347\u3002","date":"2023-04-18T00:00:00.000Z","tags":[],"readingTime":9.96,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"AutoDev\uff1aAI \u7a81\u7834\u7814\u53d1\u6548\u80fd\uff0c\u63a2\u7d22\u5e73\u53f0\u5de5\u7a0b\u65b0\u673a\u9047","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"AutoDev 0.7.0 - Generating Standardized Code, Deep Integration into Developer Daily Work","permalink":"/en/blog/autodev-0-7-0"}},"content":"\u56f4\u7ed5\u4e8e\u63a2\u7d22 AI \u5bf9\u8f6f\u4ef6\u7814\u53d1\u7684\u5f71\u54cd\uff0c\u5e76\u5728\u6709\u4e86 LLM \u5fae\u8c03\u5de5\u7a0b\u5316\u80fd\u529b\u4e4b\u540e\uff0c\u6211\u4eec\u4e0a\u5468\u672b\u53c8\u5f00\u6e90\u4e86\u4e00\u4e2a\u9002\u7528\u4e8e AI \u7814\u53d1\u63d0\u6548\u7684\u5de5\u5177\uff1aAutoDev\u3002\u5982\u6b64\u4e00\u6765\uff0c\u6211\u4eec\u4fbf\u6784\u5efa\u4e86\u63a5\u8fd1\u5b8c\u6574\u7684 AI \u5728\u7814\u53d1\u6548\u80fd\u63d0\u5347\u3002\\n\\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u57fa\u4e8e Unit Mesh\u3001DevTi\u3001AutoDev \u7b49\u4e00\u7cfb\u5217\u7684\u63a2\u7d22\uff0c\u5206\u4eab AI \u5bf9\u4e8e\u7814\u53d1\u6548\u80fd\u7684\u5f71\u54cd\uff0c\u4ee5\u53ca\u5bf9\u4e8e\u5e73\u53f0\u5de5\u7a0b\u5e26\u6765\u7684\u65b0\u673a\u9047\u3002\\n\\nPS\uff1a\u6574\u4e2a\u4f53\u7cfb\u7ad9\u5728\u4e00\u4e2a\u57fa\u672c\u5047\u8bbe\u662f\uff1a\u4e2d\u5927\u578b\u4f01\u4e1a\u5c06**\u81f3\u5c11\u62e5\u6709\u4e00\u4e2a**\u79c1\u6709\u5316\u7684\u5927\u8bed\u8a00\u6a21\u578b\u3002\\n\\nGitHub\uff1a [https://github.com/unit-mesh/auto-dev](https://github.com/unit-mesh/auto-dev)\\n\\n## \u5f15\u5b50 1\uff1aDevTi = \u8f6f\u4ef6\u5f00\u53d1\u5de5\u7a0b\u5316 + LLM \u5fae\u8c03\\n\\n> DevTi\uff08Development + Titanium\uff09\u4e00\u6b3e\u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u7684\u7814\u53d1\u6548\u80fd\u63d0\u5347\u7684\u5f00\u6e90\u9879\u76ee\u3002\u65e8\u5728\u57fa\u4e8e LLM \u7684\u5fae\u8c03\u6765\u63d0\u4f9b\u5168\u9762\u667a\u80fd\u5316\u89e3\u51b3\u65b9\u6848\uff0c\u52a9\u529b\u5f00\u53d1\u4eba\u5458\u9ad8\u6548\u5b8c\u6210\u5f00\u53d1\u4efb\u52a1\uff0c\u4ee5\u5b9e\u73b0\u81ea\u52a8\u5316\u7528\u6237\u4efb\u52a1\u62c6\u89e3\u3001\u7528\u6237\u6545\u4e8b\u751f\u6210\u3001\u81ea\u52a8\u5316\u4ee3\u7801\u751f\u6210\u3001\u81ea\u52a8\u5316\u6d4b\u8bd5\u751f\u6210\u7b49\u7b49\u3002\\n>\\n\\n\u7b80\u5355\u6765\u8bf4\uff0cDevTi \u662f AI + \u7814\u53d1\u6548\u80fd\u9886\u57df\u7684\u5c0f\u6a21\u578b\u7684\u5de5\u5177\u94fe \u2014\u2014 \u501f\u52a9\u4e8e DevTi\uff0c\u4f60\u53ef\u4ee5\u5feb\u901f\u8bad\u7ec3\u51fa\u9002\u7528\u4e8e\u8f6f\u4ef6\u7814\u53d1\u7684\u5fae\u8c03\u6a21\u578b\u3002\u4e00\u4e2a\u7b80\u5316\u7684\u6d41\u7a0b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\\n\\n![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f097631a-4cb6-4de5-a064-372d84a396a6/Untitled.png)\\n\\n\u4e3a\u4e86\u8fdb\u884c\u76f8\u5173\u7684\u6a21\u578b\u5fae\u8c03\u6216\u8005\u8bad\u7ec3\uff0c\u5728\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2a\u9636\u6bb5\u91cc\uff0c\u6211\u4eec\u90fd\u9700\u8981\u51c6\u5907\u6570\u636e\u3001\u5904\u7406\u6570\u636e\u3001\u751f\u6210 prompt \u7b49\uff0c\u5982\u51c6\u5907\u4e00\u7cfb\u5217\u7684\u7528\u6237\u6545\u4e8b\u3001\u4ee3\u7801\u751f\u6210\u7684\u6570\u636e\u3002\u6240\u4ee5\uff0c\u4f5c\u4e3a\u5de5\u7a0b\u5e08\uff0c\u9700\u8981\u51c6\u5907\u4e00\u7cfb\u5217\u7684\u7f16\u7a0b\u57fa\u7840\u8bbe\u65bd\u6216\u8005\u6a21\u5757\u3002\\n\\nDevTi \u6240\u5305\u542b\u7684\u6a21\u5757\u5982\u4e0b\u6240\u793a\uff1a\\n\\n![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fe81717b-52a8-4138-8ad4-52073ddb20fe/Untitled.png)\\n\\n\u5b83\u5305\u542b\u4e86 4.5 \u4e2a\u6a21\u5757\uff1a\\n\\n- Collector\uff08Python, JavaScript\uff09\uff0c\u6570\u636e\u6536\u96c6\u3002\u8fd9\u4e2a\u6a21\u5757\u8d1f\u8d23\u4ece\u4e0d\u540c\u7684\u6570\u636e\u6e90\uff08\u5982 GitHub\u3001Stack Overflow\u3001CodePen \u7b49\uff09\u6536\u96c6\u4ee3\u7801\u7247\u6bb5\u3001\u95ee\u9898\u3001\u7b54\u6848\u7b49\u6570\u636e\uff0c\u4ee5\u4fbf\u7528\u4e8e\u5fae\u8c03\u3002\\n- Processor\uff08Kotlin\uff09\uff0c\u6570\u636e\u5904\u7406\u3002\u8fd9\u4e2a\u6a21\u5757\u8d1f\u8d23\u5bf9\u6536\u96c6\u5230\u7684\u6570\u636e\u8fdb\u884c\u6e05\u6d17\u3001\u683c\u5f0f\u5316\u3001\u6807\u6ce8\u7b49\u9884\u5904\u7406\u64cd\u4f5c\uff0c\u4ee5\u63d0\u9ad8\u6570\u636e\u8d28\u91cf\u548c\u4e00\u81f4\u6027\u3002\\n- Prompter\uff08Python\uff09\uff0cPrompt \u8bbe\u8ba1\u3001\u8c03\u6574\u3001\u4f18\u5316\u7b49\u3002\u8fd9\u4e2a\u6a21\u5757\u8d1f\u8d23\u6839\u636e\u7528\u6237\u7684\u9700\u6c42\u548c\u573a\u666f\uff0c\u8bbe\u8ba1\u5408\u9002\u7684 Prompt \u6765\u5f15\u5bfc\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u671f\u671b\u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u7528\u6237\u6545\u4e8b\u3001\u4ee3\u7801\u7247\u6bb5\u3001\u6d4b\u8bd5\u7528\u4f8b\u7b49\u3002\\n- Train\uff08Python\uff09\uff0c\u8bad\u7ec3\u76f8\u5173\u7684 Notebook\u3002\u8fd9\u4e2a\u6a21\u5757\u5305\u542b\u4e86\u4e00\u4e9b Jupyter Notebook \u6587\u4ef6\uff0c\u7528\u4e8e\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u4e0d\u540c\u7684\u5927\u8bed\u8a00\u6a21\u578b\u5fae\u8c03\uff08\u5982 ChatGLM\u3001LLaMA\u7b49\uff09\u6765\u5b8c\u6210\u4e0d\u540c\u7684\u7814\u53d1\u4efb\u52a1\uff0c\u4f8b\u5982\u4ee3\u7801\u751f\u6210\u3001\u4ee3\u7801\u8865\u5168\u3001\u4ee3\u7801\u6ce8\u91ca\u7b49\u3002\\n- Chain\u3002\u5f85\u5b9a\\n\\n\u968f\u540e\uff0c\u4fbf\u53ef\u4ee5\u56f4\u7ed5\u4e8e DevTi \u6784\u5efa\u5de5\u5177\u94fe\uff0c\u5982 IDE \u5de5\u5177\u3001\u770b\u677f\u5de5\u5177\u7b49\u7b49\u3002\\n\\n## \u5f15\u5b50 2\uff1aAutoDev = IDE \u63d2\u4ef6 + AI API \u8c03\u7528\\n\\n> AutoDev \u662f\u4e00\u6b3e\u9ad8\u5ea6\u81ea\u52a8\u5316\u7684 AI \u8f85\u52a9\u7f16\u7a0b\u5de5\u5177\u3002AutoDev \u80fd\u591f\u4e0e\u60a8\u7684\u9700\u6c42\u7ba1\u7406\u7cfb\u7edf\uff08\u4f8b\u5982\\nJira\u3001Trello\u3001Github Issue \u7b49\uff09\u76f4\u63a5\u5bf9\u63a5\u3002\u5728 IDE \u4e2d\uff0c\u60a8\u53ea\u9700\u7b80\u5355\u70b9\u51fb\uff0cAutoDev\\n\u4f1a\u6839\u636e\u60a8\u7684\u9700\u6c42\u81ea\u52a8\u4e3a\u60a8\u751f\u6210\u4ee3\u7801\u3002\u60a8\u6240\u9700\u505a\u7684\uff0c\u4ec5\u4ec5\u662f\u5bf9\u751f\u6210\u7684\u4ee3\u7801\u8fdb\u884c\u8d28\u91cf\u68c0\u67e5\u3002\\n>\\n\\n\u7b80\u5355\u6765\u8bf4\uff0cAutoDev \u5b9a\u4f4d\u662f\u9002\u7528\u4e8e\u79c1\u6709\u5316\u5927\u8bed\u8a00\u6a21\u578b + \u9ad8\u5ea6\u96c6\u6210\u7684 AI \u7f16\u7a0b\u52a9\u624b\u3002AutoDev \u63d0\u4f9b\u4e86\u4e00\u79cd AutoCRUD \u6a21\u5f0f\uff0c\u5176\u8bbe\u8ba1\u7406\u89e3\u7684\u8fc7\u7a0b\u662f\uff1a\\n\\n1. \u4ece\u9700\u6c42\u7ba1\u7406\u7cfb\u7edf\u83b7\u53d6\u9700\u6c42\uff0c\u5e76\u8fdb\u884c\u9700\u6c42\u5206\u6790\u3002\\n2. \u7ed3\u5408\u6e90\u7801\u4e0e\u9700\u6c42\u7cfb\u7edf\uff0c\u9009\u62e9\u6700\u9002\u5408\u53d8\u66f4\u7684\u5165\u53e3\uff08\u5982 Java \u4e2d\u7684 Controller\uff09\\n3. \u5c06\u9700\u6c42\u4e0e Controller \u4ea4\u7ed9 AI \u5206\u6790\uff0c\u4ee5\u5b9e\u73b0\u4ee3\u7801\u7684\u4ee3\u7801\u3002\\n4. \u6839\u636e Controller \u9010\u6b65\u81ea\u52a8\u5b8c\u6210\u5176\u5b83\u90e8\u5206\u4ee3\u7801\uff08\u5b9e\u73b0\u4e2d\u2026\uff09\\n\\n\u53e6\u5916\u4e00\u79cd\u6a21\u5f0f\u5219\u662f\u666e\u901a\u7684 Copilot \u6a21\u5f0f\uff0c\u53ef\u4ee5\u63a5\u5165\u73b0\u6709\u7684\u5927\u6a21\u578b\u5de5\u5177\uff0c\u5b9e\u73b0\u4e00\u7cfb\u5217\u7684 AI \u4ee3\u7801\u8f85\u52a9\u76f8\u5173\u529f\u80fd\u3002\\n\\n![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a6b953b9-9e49-48b2-a368-dddb6f4150b0/Untitled.png)\\n\\nGitHub\uff1a [https://github.com/unit-mesh/auto-dev](https://github.com/unit-mesh/auto-dev)\\n\\n\u63a5\u5165 LLM\uff0c\u6211\u4eec\u4e0d\u4ec5\u53ef\u4ee5\u751f\u6210\u4ee3\u7801\uff0c\u8fd8\u53ef\u4ee5\u751f\u6210\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801\uff0c\u4ece\u800c\u63d0\u9ad8\u6d4b\u8bd5\u6548\u7387\u548c\u8986\u76d6\u7387\u3002\\n\\n\u8ba9\u6211\u4eec\u518d\u5c55\u5f00\u770b\u4e00\u770b\uff0c\u57fa\u4e8e\u73b0\u6709\u7684 AI \u80fd\u529b\uff0c\u4f1a\u6709\u54ea\u4e9b\u65b0\u53ef\u80fd\u6027\u3002\\n\\n## \u5e73\u53f0\u5de5\u7a0b\u7684\u53d8\u5316\u4e0e\u65b0\u673a\u9047\\n\\n\u800c\u9664\u4e86\u6211\u4eec\u4e0a\u8ff0\u7684 demo \u4e4b\u5916\uff0c\u6211\u4eec\u76f8\u4fe1\u5b83\u5e26\u4f1a\u5176\u5b83\u5e26\u6765\u4e00\u7cfb\u5217\u7684\u53d8\u5316\u3002\u5bf9\u4e8e\u4e2d\u5927\u578b\u7ec4\u7ec7\u7684\u57fa\u7840\u8bbe\u65bd\u6216\u8005\u5e73\u53f0\u56e2\u961f\u6765\u8bf4\uff0c\u8981\u63a5\u5165 AI \u80fd\u529b\u9700\u8981\u6709\u66f4\u591a\u7684\u53d8\u5316\u4e0e\u673a\u9047\u3002\\n\\n> \u5e73\u53f0\u5de5\u7a0b\u662f\u4e00\u79cd\u7528\u6765\u6784\u5efa\u548c\u8fd0\u7ef4\u652f\u6301\u8f6f\u4ef6\u4ea4\u4ed8\u548c\u751f\u547d\u5468\u671f\u7ba1\u7406\u7684\u81ea\u52a9\u5f0f\u5185\u90e8\u5f00\u53d1\u8005\u5e73\u53f0\u7684\u673a\u5236\u548c\u67b6\u6784\u3002\u5e73\u53f0\u5de5\u7a0b\u53ef\u4ee5\u63d0\u9ad8\u5f00\u53d1\u8005\u7684\u4f53\u9a8c\u548c\u751f\u4ea7\u529b\uff0c\u63d0\u4f9b\u81ea\u52a8\u5316\u7684\u57fa\u7840\u8bbe\u65bd\u64cd\u4f5c\u3002\u5e73\u53f0\u5de5\u7a0b\u662f\u8f6f\u4ef6\u5de5\u7a0b\u7ec4\u7ec7\u7684\u65b0\u8d8b\u52bf\uff0c\u5b83\u53ef\u4ee5\u4f18\u5316\u5f00\u53d1\u8005\u7684\u5de5\u4f5c\u6d41\u7a0b\uff0c\u52a0\u901f\u4ea7\u54c1\u56e2\u961f\u4ea4\u4ed8\u5ba2\u6237\u4ef7\u503c\u3002\\n>\\n\\n\u5e73\u53f0\u5de5\u7a0b\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5c06\u5e73\u53f0\u89c6\u4e3a\u4e00\u79cd\u4ea7\u54c1\uff0c\u7531\u4e13\u4e1a\u7684\u5e73\u53f0\u56e2\u961f\u6765\u521b\u5efa\u548c\u7ef4\u62a4\uff0c\u4e3a\u5185\u90e8\u7684\u5ba2\u6237\uff08\u5982\u5f00\u53d1\u8005\u3001\u6570\u636e\u79d1\u5b66\u5bb6\u7b49\uff09\u63d0\u4f9b\u53ef\u590d\u7528\u7684\u670d\u52a1\u3001\u7ec4\u4ef6\u548c\u5de5\u5177\u3002\\n\\n### \u9700\u6c42\uff1a\u81ea\u52a8\u5316\u6536\u655b\u3001\u5206\u6790\u4e0e\u5b8c\u5584\\n\\n\u5728\u73b0\u6709\u7684\u573a\u666f\u4e4b\u4e0b\uff0c\u5df2\u7ecf\u6709\u4e00\u7cfb\u5217\u7684\u5173\u4e8e\u7ed3\u5408  AI \u8fdb\u884c\u9700\u6c42\u7ba1\u7406\u7684\u5c1d\u8bd5\uff1a\\n\\n- \u81ea\u52a8\u5316\u5b8c\u5584\u3002\u5bf9\u7528\u6237\u7684\u53cd\u9988\u548c\u6570\u636e\u7684\u5206\u6790\uff0c\u81ea\u52a8\u8bc6\u522b\u548c\u8865\u5145\u7f3a\u5931\u7684\u9700\u6c42\u4fe1\u606f\uff0c\u4f8b\u5982\u81ea\u52a8\u8bc6\u522b\u7528\u6237\u63d0\u51fa\u7684\u95ee\u9898\u5e76\u8f6c\u5316\u4e3a\u9700\u6c42\u63cf\u8ff0\uff0c\u81ea\u52a8\u8865\u5168\u9700\u6c42\u7684\u5173\u952e\u8bcd\u548c\u6807\u7b7e\u7b49\u3002\\n- \u81ea\u52a8\u5316\u5206\u6790\u3002\u901a\u8fc7\u8bad\u7ec3\u81ea\u5e26\u7684\u9886\u57df\u77e5\u8bc6\uff0c\u53ef\u4ee5\u66f4\u597d\u5730\u8bc4\u4f30\u548c\u4f18\u5316\u9700\u6c42\uff0c\u53d1\u73b0\u6f5c\u5728\u7684\u95ee\u9898\u548c\u673a\u4f1a\uff0c\u63d0\u9ad8\u9700\u6c42\u7684\u6548\u7387\u548c\u6548\u679c\u3002\\n- \u81ea\u52a8\u5316\u6536\u655b\u3002\u7ed3\u5408\u5176\u5b83 AI \u6280\u672f\uff0c\u6bd4\u5982\u667a\u80fd\u63a8\u8350\u3001\u5bf9\u8bdd\u7cfb\u7edf\u3001\u591a\u65b9\u534f\u4f5c\u7b49\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u6c9f\u901a\u548c\u534f\u8c03\u9700\u6c42\uff0c\u6536\u96c6\u548c\u6574\u5408\u7528\u6237\u7684\u53cd\u9988\u548c\u75db\u70b9\uff0c\u63d0\u9ad8\u9700\u6c42\u7684\u6ee1\u610f\u5ea6\u548c\u4e00\u81f4\u6027\u3002\\n- \u81ea\u52a8\u5316\u8fed\u4ee3\u3002\u7ed3\u5408\u4eba\u7c7b\u53cd\u9988\u7684 AI \u6570\u636e\uff0c\u53ef\u4ee5\u66f4\u597d\u5730\u66f4\u65b0\u548c\u6539\u8fdb\u9700\u6c42\u751f\u6210\uff0c\u9002\u5e94\u4e0d\u65ad\u53d8\u5316\u7684\u73af\u5883\u548c\u7528\u6237\u9700\u6c42\uff0c\u63d0\u9ad8\u9700\u6c42\u7684\u6301\u7eed\u6027\u548c\u521b\u65b0\u6027\\n\\n\u5c3d\u7ba1\u73b0\u6709\u7684\u51e0\u4e2a\u65b9\u6848\uff1aLangChain\u3001llama-index \u7b49\u6682\u65f6\u53ea\u652f\u6301 OpenAI\uff0c\u4f46\u662f\u968f\u7740\u66f4\u591a\u5f00\u6e90\u5927\u8bed\u8a00\u6a21\u578b\u7684\u52a0\u5165\uff0c\u672a\u6765\u4f1a\u66f4\u6613\u4e8e\u843d\u5730\u3002\\n\\n### \u5de5\u5177\u94fe\uff1a\u667a\u80fd\u7684 IDE\\n\\n\u5bf9\u4e8e\u73b0\u6709\u7684\u573a\u666f\u6765\u8bf4\uff0c\u5df2\u7ecf\u76f8\u5f53\u7684\u4e30\u5bcc\uff0c\u8bf8\u5982\u4e8e\uff1a\\n\\n- \u81ea\u52a8\u5316\u4ee3\u7801\u5ba1\u67e5\\n- \u81ea\u52a8\u5316\u6d4b\u8bd5\\n- \u81ea\u52a8\u5316\u65e5\u5fd7\u5206\u6790\\n- AI \u8f85\u52a9\u7f16\u7a0b\\n- \u2026\u2026\\n\\n\u8bda\u7136\uff0c\u8bf8\u5982\u4e8e GitHub Copilot \u7b49\u6536\u8d39 AI \u5de5\u5177\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5927\u90e8\u5206\u516c\u53f8\u6765\u8bf4\uff0c\u8d35\u53ef\u80fd\u662f\u5176\u6b21\uff0c\u91cd\u70b9\u662f\u4ee3\u7801\u7684\u5b89\u5168\u6027\u3002\u800c\u867d\u7136\u56fd\u5185\u5404\u7c7b\u65b0\u7684\u6a21\u578b\u5c42\u51fa\u4e0d\u7a77\uff0c\u4f46\u662f\u5927\u90e8\u5206\u7f3a\u5c11\u7f16\u7a0b\u76f8\u5173\u7684\u96c6\u6210\uff0c\u53c8\u6216\u8005\u662f\u7f16\u7a0b\u80fd\u529b\u6bd4\u8f83\u5f31\u3002\u7136\u800c\uff0c\u5e02\u9762\u4e0a\u4e5f\u6709\u53ea\u7528\u4e8e\u7f16\u7a0b\u76f8\u5173\u7684\u6a21\u578b\uff0c\u5982 Salesforce \u5728 Hugging Face \u4e0a\u63d0\u4f9b\u7684 16B CodeGen \u6a21\u578b\u3002\u867d\u7136\uff0c\u8fd8\u9700\u8981\u7ecf\u8fc7\u4e00\u4e9b\u5c0f\u7684\u5fae\u8c03\uff0c\u4f46\u662f\u5982 Replit \u516c\u53f8\u6240\u8a00\uff0c\u6548\u679c\u8fd8\u662f\u975e\u5e38\u4e0d\u9519\u7684\u3002\\n\\n\u968f\u540e\uff0c\u4fbf\u662f\u7c7b\u4f3c\u4e8e AutoDev \u9488\u5bf9\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\u8fdb\u884c\u7684\u5c01\u88c5\uff0c\u7b80\u5316\u666e\u901a\u5f00\u53d1\u4eba\u5458\u7684\u5f00\u53d1\u8fc7\u7a0b\u3002\\n\\n### \u6587\u6863\uff1a\u8d85\u8d8a\u641c\u7d22\\n\\n\u5728\u6709\u4e86 LLM \u548c\u5404\u79cd\u667a\u80fd\u95ee\u7b54\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u52a0\u5165\u5185\u90e8\u5404\u79cd\u5de5\u5177\u7684\u6587\u6863\u548c\u4ee3\u7801\uff0c\u4ee5\u63d0\u4f9b\u66f4\u5168\u9762\u3001\u66f4\u667a\u80fd\u7684\u6587\u6863\u670d\u52a1\u3002\u4f8b\u5982\uff0cLangChain \u6784\u5efa\u7684\u95ee\u7b54\u5f0f\u6587\u6863\uff0c\u53ef\u4ee5\u5bf9\u4f01\u4e1a\u5185\u90e8\u7684\u5404\u79cd\u6587\u6863\u8fdb\u884c\u8bed\u4e49\u7406\u89e3\u548c\u667a\u80fd\u95ee\u7b54\uff0c\u8fdb\u800c\u7b80\u5316\u5f00\u53d1\u4eba\u5458\u7684\u5b66\u4e60\u6210\u672c\u3002\\n\\n## \u5176\u5b83\\n\\nAI \u6b63\u5728\u5e26\u6765\u4e00\u7cfb\u5217\u7684\u53d8\u5316\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u4e2d\u5927\u578b\u4f01\u4e1a\u7684\u5e73\u53f0\u5de5\u7a0b\u56e2\u961f\u6765\u8bf4\uff0c\u63a5\u5165 AI \u80fd\u529b\u9700\u8981\u6709\u66f4\u591a\u7684\u53d8\u5316\u4e0e\u673a\u9047\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u81ea\u52a8\u5316\u6536\u655b\u3001\u5206\u6790\u4e0e\u5b8c\u5584\u9700\u6c42\uff0c\u6784\u5efa\u667a\u80fd\u7684IDE\uff0c\u63d0\u4f9b\u66f4\u5168\u9762\u3001\u66f4\u667a\u80fd\u7684\u6587\u6863\u670d\u52a1\u7b49\u3002\\n\\n\u6211\u4eec\u4f9d\u65e7\u5728\u63a2\u7d22\u4e2d\uff0c\u6b22\u8fce\u6765\u52a0\u5165\u6211\u4eec\u3002"}]}}')}}]);