"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4339],{7727:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"development/patterns/executable-unit-validation","title":"Executable Unit Validation","description":"Executable unit validation refers to the process of testing and verifying the generated code to ensure that it can be","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/development/patterns/executable-unit-validation.md","sourceDirName":"development/patterns","slug":"/development/patterns/executable-unit-validation","permalink":"/en/development/patterns/executable-unit-validation","draft":false,"unlisted":false,"editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/docs/development/patterns/executable-unit-validation.md","tags":[],"version":"current","frontMatter":{"layout":"default","title":"Executable Unit Validation","nav_order":4,"parent":"Design Patterns","permalink":"/patterns/executable-unit-validation"},"sidebar":"developmentSidebar","previous":{"title":"Design Patterns","permalink":"/en/development/patterns/"},"next":{"title":"By Example","permalink":"/en/development/patterns/by-example"}}');var a=n(4848),o=n(8453);const c={layout:"default",title:"Executable Unit Validation",nav_order:4,parent:"Design Patterns",permalink:"/patterns/executable-unit-validation"},r=void 0,s={},d=[];function l(e){const t={code:"code",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Executable unit validation refers to the process of testing and verifying the generated code to ensure that it can be\ncompiled and executed by the compiler. The aim of executable unit validation is to enhance the accuracy and\nexecutability of the generated code, ensuring that the generated code units meet expectations and can be effectively\nutilized."}),"\n",(0,a.jsx)(t.p,{children:"In AutoDev, corresponding to functionalities such as SQL combined with the database, unit testing, and functional code\ngeneration, we have preliminarily designed the following validation mechanisms:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Unit Test Syntax (TODO): Check whether the generated unit test code complies with language syntax specifications to\nensure it can be compiled correctly by the compiler."}),"\n",(0,a.jsx)(t.li,{children:"Unit Test Execution: Execute the generated unit test cases to test the generated code, ensuring it can be compiled and\nexecuted correctly by the compiler."}),"\n",(0,a.jsx)(t.li,{children:"SQL Syntax Validation: Generate SQL statements based on different model capabilities and handle any resulting errors."}),"\n",(0,a.jsx)(t.li,{children:"SQL Schema Validation (TODO): Combine with the connected database to check the generated SQL statements, ensuring they\ncomply with the database schema specifications."}),"\n",(0,a.jsx)(t.li,{children:"Functional Code Generation Validation (TODO): Adopt a test-driven validation mechanism to check the generated code,\nensuring it meets development requirements and can be compiled correctly by the compiler."}),"\n",(0,a.jsx)(t.li,{children:"Frontend Code Generation Validation (TODO): Check the generated frontend code to ensure correctness in imports,\nsyntax, etc."}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Considering that unit tests are directly executable, in AutoDev, we directly execute unit tests (",(0,a.jsx)(t.code,{children:"RunService"}),"), and with\na fast enough IDE, the validation process is generally rapid. Through the aforementioned validation mechanisms, we can\neffectively enhance the accuracy and executability of the generated code, ensuring that the generated code units meet\nexpectations and can be effectively utilized."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>r});var i=n(6540);const a={},o=i.createContext(a);function c(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);