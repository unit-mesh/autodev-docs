"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[585],{3928:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"development/compatible-strategy","title":"Compatible Strategy","description":"In JetBrains\' IDE, it is important to note that APIs can undergo changes, leading to potential incompatibility issues","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/development/compatible-strategy.md","sourceDirName":"development","slug":"/development/compatible-strategy","permalink":"/en/development/compatible-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/docs/development/compatible-strategy.md","tags":[],"version":"current","frontMatter":{"layout":"default","title":"Compatible Strategy","nav_order":3,"parent":"Development"},"sidebar":"developmentSidebar","previous":{"title":"Development FAQ","permalink":"/en/development/development-faq"},"next":{"title":"Custom Language","permalink":"/en/development/custom-language"}}');var r=t(4848),s=t(8453);const o={layout:"default",title:"Compatible Strategy",nav_order:3,parent:"Development"},l=void 0,a={},c=[{value:"Gradle Configuration for Compatibility",id:"gradle-configuration-for-compatibility",level:2},{value:"Platform Version Configuration",id:"platform-version-configuration",level:3},{value:"Gradle SourceSets",id:"gradle-sourcesets",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"In JetBrains' IDE, it is important to note that APIs can undergo changes, leading to potential incompatibility issues\nbetween the plugin and the latest IDE versions. To address this, it is necessary to configure a compatibility strategy\nfor the plugin."}),"\n",(0,r.jsx)(n.p,{children:"Within AutoDev, we employ the following strategies:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Latest APIs:"})," We support versions 233 to 241 and beyond, representing JetBrains' IDEs where AI plugin development\nbegan."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Stable APIs:"})," Our compatibility extends to versions 222 to 232, which are widely utilized within enterprise\nenvironments and ensure stability."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"By adopting these strategies, we aim to enhance the plugin's compatibility with various JetBrains IDE versions, catering\nto both cutting-edge and established enterprise development environments."}),"\n",(0,r.jsx)(n.h2,{id:"gradle-configuration-for-compatibility",children:"Gradle Configuration for Compatibility"}),"\n",(0,r.jsxs)(n.p,{children:["To ensure compatibility with different IDE versions, we can configure the plugin in the Gradle config, such as\n",(0,r.jsx)(n.code,{children:"gradle.properties"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# Supported platforms: 222, 233\nplatformVersion=233\n"})}),"\n",(0,r.jsx)(n.p,{children:"By specifying the platform version, we can ensure that the plugin is compatible with the desired IDE versions."}),"\n",(0,r.jsx)(n.h3,{id:"platform-version-configuration",children:"Platform Version Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["According to the different platform versions, we can configure the plugin by ",(0,r.jsx)(n.code,{children:"gradle-{version}.properties"}),".\nFor example, in ",(0,r.jsx)(n.code,{children:"gradle-222.properties"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"pluginSinceBuild=222.*\npluginUntilBuild=232.*\n"})}),"\n",(0,r.jsx)(n.h3,{id:"gradle-sourcesets",children:"Gradle SourceSets"}),"\n",(0,r.jsxs)(n.p,{children:["We can also configure the plugin in the Gradle source sets, such as ",(0,r.jsx)(n.code,{children:"src/main/{version}/kotlin"})," in ",(0,r.jsx)(n.code,{children:"build.gradle.kts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'allprojects {\n    // ...\n    sourceSets {\n        main {\n            java.srcDirs("src/gen")\n            resources.srcDirs("src/$platformVersion/main/resources")\n        }\n        test {\n            resources.srcDirs("src/$platformVersion/test/resources")\n        }\n    }\n    kotlin {\n        sourceSets {\n            main {\n                kotlin.srcDirs("src/$platformVersion/main/kotlin")\n            }\n            test {\n                kotlin.srcDirs("src/$platformVersion/test/kotlin")\n            }\n        }\n    }\n    // ...\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"By configuring the plugin in the Gradle source sets, we can ensure that the plugin is compatible with different IDE\nversions, catering to both cutting-edge and established enterprise development environments."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);