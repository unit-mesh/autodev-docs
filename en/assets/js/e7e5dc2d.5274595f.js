"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7240],{4143:e=>{e.exports=JSON.parse('{"permalink":"/en/blog/2024/02/25/autodev-1-6-4","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2024-02-25-autodev-1-6-4.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2024-02-25-autodev-1-6-4.md","title":"AutoDev 1.6.4 Enhanced Development Experience for HarmonyOS Applications","description":"Generative AI holds tremendous potential in software development and knowledge management, which is why this technology is being increasingly adopted by enterprises. Emerging technologies like the HarmonyOS operating system introduce new concepts, development tools like DevEco Studio, the ArkTS language, and the ArkUI framework. In terms of implementation patterns, its integration with generative AI closely resembles the process of combining AI with enterprise infrastructure.","date":"2024-02-25T00:00:00.000Z","tags":[],"readingTime":3.605,"hasTruncateMarker":false,"authors":[],"frontMatter":{"layout":"default","title":"AutoDev 1.6.4 Enhanced Development Experience for HarmonyOS Applications","nav_order":7},"unlisted":false,"prevItem":{"title":"AutoDev 1.7.0 AutoDev AI Agent","permalink":"/en/blog/2024/03/07/autodev-1-7-0"},"nextItem":{"title":"AutoDev 1.6.0 - Precise Page Generation and SQL Generation","permalink":"/en/blog/2024/01/26/autodev-1-6-0"}}')},5462:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});var t=i(4143),r=i(4848),o=i(8453);const a={layout:"default",title:"AutoDev 1.6.4 Enhanced Development Experience for HarmonyOS Applications",nav_order:7},s=void 0,l={authorsImageUrls:[]},c=[{value:"Three Experimental Features for HarmonyOS + Generative AI",id:"three-experimental-features-for-harmonyos--generative-ai",level:2},{value:"1. AI Support for ArkTS Language",id:"1-ai-support-for-arkts-language",level:2},{value:"2. AutoArkUI: RAG-enhanced ArkUI Code Generation",id:"2-autoarkui-rag-enhanced-arkui-code-generation",level:2},{value:"3. Migrating Android/iOS/Mini-Program Applications",id:"3-migrating-androidiosmini-program-applications",level:2},{value:"4. RAG-enhanced Chat Context: C++ NAPI etc.",id:"4-rag-enhanced-chat-context-c-napi-etc",level:2},{value:"Future Directions",id:"future-directions",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Generative AI holds tremendous potential in software development and knowledge management, which is why this technology is being increasingly adopted by enterprises. Emerging technologies like the HarmonyOS operating system introduce new concepts, development tools like DevEco Studio, the ArkTS language, and the ArkUI framework. In terms of implementation patterns, its integration with generative AI closely resembles the process of combining AI with enterprise infrastructure."}),"\n",(0,r.jsx)(n.p,{children:"Therefore, we began exploring possibilities in AutoDev to integrate these new knowledge domains while reducing developers' learning burden."}),"\n",(0,r.jsxs)(n.p,{children:["Source code: ",(0,r.jsx)(n.a,{href:"https://github.com/unit-mesh/auto-dev",children:"https://github.com/unit-mesh/auto-dev"})]}),"\n",(0,r.jsx)(n.h2,{id:"three-experimental-features-for-harmonyos--generative-ai",children:"Three Experimental Features for HarmonyOS + Generative AI"}),"\n",(0,r.jsx)(n.p,{children:"After initial discussions with the HarmonyOS team about their self-developed tools, we identified three experimental directions for AutoDev:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Add ArkTS support. ArkTS is an application development language based on TypeScript extensions in the HarmonyOS ecosystem."}),"\n",(0,r.jsx)(n.li,{children:"Automatic ArkUI page generation. ArkUI is a declarative UI development framework for building distributed application interfaces. It shares similarities with our existing AutoPage feature and can generate code/UI through chain-of-thought reasoning."}),"\n",(0,r.jsx)(n.li,{children:"UI layout migration. Converting code from other languages/frameworks into HarmonyOS-compatible code using generative AI."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'As someone who has studied Gradle, Intellij Community, DevEco Studio source code, and authored "Frontend Architecture: From Basics to Micro Frontends", I possess relevant experience with TypeScript, ArkUI, and declarative UIs. Thus, I confidently embarked on developing new AutoDev features - only to encounter numerous challenges.'}),"\n",(0,r.jsx)(n.h2,{id:"1-ai-support-for-arkts-language",children:"1. AI Support for ArkTS Language"}),"\n",(0,r.jsxs)(n.p,{children:["After installing DevEco Studio, I discovered AutoDev didn't support TypeScript??? After testing in WebStorm, I realized the IDE difference. Using the PSIViewer plugin, I found DevEco Studio implements its own JavaScript/TypeScript PSI, e.g., ",(0,r.jsx)(n.code,{children:"com.huawei.ace.language.psi.impl.JavaScriptIdentifierNameImpl"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The reasons are apparent:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The JavaScript plugin for IntelliJ platform is proprietary."}),"\n",(0,r.jsx)(n.li,{children:"Extending TypeScript syntax directly would be simpler than creating a new language."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Thus, DevEco Studio developed custom JavaScript/TypeScript modules supporting syntax highlighting, code completion, and formatting. It also introduced the ArkTS language as a TypeScript extension."}),"\n",(0,r.jsx)(n.p,{children:"This means three new file types appear in DevEco Studio + AutoDev:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Huawei JavaScript"}),"\n",(0,r.jsx)(n.li,{children:"Huawei TypeScript"}),"\n",(0,r.jsx)(n.li,{children:"Huawei ArkTS"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Headache..."}),"\n",(0,r.jsx)(n.p,{children:"Our solution in AutoDev involves preliminary abstraction based on standard PSI to support documentation generation. A more robust approach would require:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Reusing JavaScript PSI through reflection"}),"\n",(0,r.jsx)(n.li,{children:"Integrating DevEco Studio's JavaScript support"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Considering debugging complexity and existing xxStudio code references, we temporarily abandoned this approach - assuming HarmonyOS IDEs will eventually provide their own AI capabilities."}),"\n",(0,r.jsx)(n.h2,{id:"2-autoarkui-rag-enhanced-arkui-code-generation",children:"2. AutoArkUI: RAG-enhanced ArkUI Code Generation"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"ArkUI is a declarative UI development framework for building distributed application interfaces."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Compared with ArkTS, integrating ArkUI presents more complexity. The current version focuses on generating pages using classic UI elements:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Layouts: Row, Column, Stack, Flex, etc."}),"\n",(0,r.jsx)(n.li,{children:"Components: Button, Radio, Toggle, etc."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Since ChatGPT lacks knowledge of HarmonyOS updates, we adopted a two-step generation approach similar to AutoPage:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Analyze user requirements to select appropriate layouts and components"}),"\n",(0,r.jsx)(n.li,{children:"Generate corresponding ArkUI code based on detailed layout/component information"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This process constitutes AutoDev's AutoArkUI feature. The step 1 prompt example:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User: // maybe send Android Layout code, maybe some requirements"}),"\n",(0,r.jsx)(n.li,{children:"Your Answer: [FlexLayout, Button, CheckBox, Checkbox, Button]"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Considering programming DSLs' sensitivity to natural language, we use English prompts to avoid generating Chinese DSLs."}),"\n",(0,r.jsx)(n.h2,{id:"3-migrating-androidiosmini-program-applications",children:"3. Migrating Android/iOS/Mini-Program Applications"}),"\n",(0,r.jsx)(n.p,{children:"Generative AI demonstrates excellent code translation capabilities, as seen in IBM's COBOL-to-Java conversions and AutoDev's legacy system modernization features."}),"\n",(0,r.jsx)(n.p,{children:"We've implemented layout migration support in AutoDev, though current limitations exist:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Android layout conversion often produces errors"}),"\n",(0,r.jsx)(n.li,{children:"Need for better static code analysis integration"}),"\n",(0,r.jsx)(n.li,{children:"Merged functionality with AutoArkUI requires refinement"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"4-rag-enhanced-chat-context-c-napi-etc",children:"4. RAG-enhanced Chat Context: C++ NAPI etc."}),"\n",(0,r.jsx)(n.p,{children:"Through experimentation, we observed ChatGPT's lack of HarmonyOS knowledge. Thus, we implemented HarmonyOS-specific context in AutoDev 1.6.4:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Basic declaration: ",(0,r.jsx)(n.code,{children:"This project is a HarmonyOS project."})]}),"\n",(0,r.jsxs)(n.li,{children:["Language-specific contexts:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'TypeScript/ArkTS: "Uses Flutter-like declarative UI framework"'}),"\n",(0,r.jsx)(n.li,{children:'C++: "Uses NAPI for building native Addons"'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This helps guide AI:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For frontend code: Consider Flutter-like declarative UI patterns"}),"\n",(0,r.jsx)(n.li,{children:"For native code: Consider NAPI-based plugin architecture"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These contexts are based on preliminary understanding and require refinement."}),"\n",(0,r.jsx)(n.h2,{id:"future-directions",children:"Future Directions"}),"\n",(0,r.jsx)(n.p,{children:"Current limitations (implemented within hours):"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Android layout conversion inaccuracies"}),"\n",(0,r.jsx)(n.li,{children:"Hardcoded component/layout information"}),"\n",(0,r.jsx)(n.li,{children:"Lack of dynamically generated sample codes"}),"\n",(0,r.jsx)(n.li,{children:"Incomplete C++ support"}),"\n",(0,r.jsx)(n.li,{children:"Mini-program platform conversions"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"As I'm not an expert in Android/mini-program migration to HarmonyOS, challenges remain. Future improvements depend on motivation to develop more interesting features."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var t=i(6540);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);