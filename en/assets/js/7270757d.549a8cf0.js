"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[864],{2047:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>g,frontMatter:()=>l,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"development/debug-new-language","title":"Debug New Language","description":"In JetBrains\' IDE, some language support is not good enough, and some language support is not available at all.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/development/debug-new-language.md","sourceDirName":"development","slug":"/development/debug-new-language","permalink":"/en/development/debug-new-language","draft":false,"unlisted":false,"editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/docs/development/debug-new-language.md","tags":[],"version":"current","frontMatter":{"layout":"default","title":"Debug New Language","nav_order":2,"parent":"Development"},"sidebar":"developmentSidebar","previous":{"title":"Custom Language","permalink":"/en/development/custom-language"},"next":{"title":"Dev New Language","permalink":"/en/development/dev-new-language"}}');var t=s(4848),r=s(8453);const l={layout:"default",title:"Debug New Language",nav_order:2,parent:"Development"},a=void 0,o={},u=[{value:"Debug Config",id:"debug-config",level:2},{value:"Configure in Gradle",id:"configure-in-gradle",level:2},{value:"Debug Config for Rust",id:"debug-config-for-rust",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"In JetBrains' IDE, some language support is not good enough, and some language support is not available at all."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Good enough language will have IDE support, like golang with GoLand."}),"\n",(0,t.jsx)(n.li,{children:"Not good enough language will have no IDE support, like Rust with CLion (before RustRover)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"So, we need to configure plugin for the language"}),"\n",(0,t.jsx)(n.h2,{id:"debug-config",children:"Debug Config"}),"\n",(0,t.jsxs)(n.p,{children:["for Debug, We already run configs under ",(0,t.jsx)(n.code,{children:".idea/runConfigurations"}),", so we can just copy and modify them."]}),"\n",(0,t.jsx)(n.p,{children:"Here are some examples [RustRust.xml] :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<component name="ProjectRunConfigurationManager">\n  <configuration default="false" name="Run Rust" type="GradleRunConfiguration" factoryName="Gradle">\n    <ExternalSystemSettings>\n      <option name="executionName" />\n      <option name="externalProjectPath" value="$PROJECT_DIR$" />\n      <option name="externalSystemIdString" value="GRADLE" />\n      <option name="scriptParameters" value="-PbaseIDE=idea -Plang=rust" />\n      <option name="taskDescriptions">\n        <list />\n      </option>\n      <option name="taskNames">\n        <list>\n          <option value=":plugin:runIde" />\n        </list>\n      </option>\n      <option name="vmOptions" value="" />\n    </ExternalSystemSettings>\n    <GradleScriptDebugEnabled>false</GradleScriptDebugEnabled>\n    <method v="2" />\n  </configuration>\n</component>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["We configure the ",(0,t.jsx)(n.code,{children:"scriptParameters"})," to pass the ",(0,t.jsx)(n.code,{children:"baseIDE"})," and ",(0,t.jsx)(n.code,{children:"lang"})," to the gradle script."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"./gradlew :plugin:runIde -PbaseIDE=idea -Plang=rust\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configure-in-gradle",children:"Configure in Gradle"}),"\n",(0,t.jsx)(n.p,{children:"We can configure the plugin in Gradle script, like build.gradle.kts :"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'project(":plugin") {\n    apply {\n        plugin("org.jetbrains.changelog")\n    }\n\n    version = prop("pluginVersion") + "-$platformVersion"\n\n    intellij {\n        pluginName.set(basePluginArchiveName)\n        val pluginList: MutableList<String> = mutableListOf("Git4Idea")\n        when (lang) {\n            "idea" -> {\n                pluginList += javaPlugins\n            }\n            "python" -> {\n                pluginList += pycharmPlugins\n            }\n            "go" -> {\n                pluginList += listOf("org.jetbrains.plugins.go")\n            }\n            "rust" -> {\n                pluginList += rustPlugins\n            }\n        }\n\n        plugins.set(pluginList)\n    }\n  \n    // ...\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"rustPlugins"}),", we can see the plugin list for Rust:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'val rustPlugins = listOf(\n    prop("rustPlugin"),\n    "org.toml.lang"\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:'prop("rustPlugin")'})," is defined in ",(0,t.jsx)(n.code,{children:"gradle.properties"}),", which will also load different version of plugin for different IDE version."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"gradle-222.properties"}),"\n",(0,t.jsx)(n.li,{children:"gradle-233.properties"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"gradle-222.properties"}),", we can see the plugin version for Rust:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-properties",children:"rustPlugin=org.rust.lang:0.4.185.5086-222\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"gradle-233.properties"}),", we can see the plugin version for Rust:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-properties",children:"rustPlugin=com.jetbrains.rust:233.21799.284\n"})}),"\n",(0,t.jsx)(n.h2,{id:"debug-config-for-rust",children:"Debug Config for Rust"}),"\n",(0,t.jsx)(n.p,{children:"Tricks for Rust development."}),"\n",(0,t.jsx)(n.p,{children:"Due to JetBrains' crafty move, there are two different versions of the Rust IDE plugin."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Under 233: Deprecated Rust"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["check latest available version here ",(0,t.jsx)(n.a,{href:"https://plugins.jetbrains.com/plugin/8182--deprecated-rust",children:"https://plugins.jetbrains.com/plugin/8182--deprecated-rust"})]}),"\n",(0,t.jsx)(n.li,{children:"rustPlugin=org.rust.lang:0.4.185.5086-222"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Above 233: Official Rust"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["check latest available version here ",(0,t.jsx)(n.a,{href:"https://plugins.jetbrains.com/plugin/22407-rust/versions",children:"https://plugins.jetbrains.com/plugin/22407-rust/versions"})]}),"\n",(0,t.jsx)(n.li,{children:"rustPlugin=com.jetbrains.rust:233.21799.284"}),"\n"]}),"\n"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);