"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6795],{2986:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"composer/planner","title":"Sketch Planner","description":"AutoDev Planner is a task planning system that enhances AI-assisted coding by making progress visible and interactive.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/composer/planner.md","sourceDirName":"composer","slug":"/composer/planner","permalink":"/en/composer/planner","draft":false,"unlisted":false,"editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/docs/composer/planner.md","tags":[],"version":"current","frontMatter":{"layout":"default","title":"Sketch Planner","nav_order":2},"sidebar":"tutorialSidebar","previous":{"title":"AutoDev Sketch/Composer","permalink":"/en/composer/"},"next":{"title":"Composer Sketch View","permalink":"/en/composer/sketch-view"}}');var t=s(4848),r=s(8453);const l={layout:"default",title:"Sketch Planner",nav_order:2},a=void 0,o={},c=[{value:"Design inside Planner",id:"design-inside-planner",level:3},{value:"The Need for a Well-Designed AI Agent",id:"the-need-for-a-well-designed-ai-agent",level:4},{value:"Plan Example",id:"plan-example",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"AutoDev Planner is a task planning system that enhances AI-assisted coding by making progress visible and interactive.\nInspired by AI coding tools like GitHub Copilot Workspace, Cursor, and JetBrains Junie, it aims to improve transparency\nand adaptability in AI-driven development workflows."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Visible Task Planning"})," \u2013 Users can track task progress through the Planner ToolWindow and pin important tasks."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dynamic Task Adjustment"})," \u2013 AI dynamically refines plans based on context, though responsiveness depends on the\nmodel used."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Manual Execution"})," \u2013 Users can manually execute incomplete tasks to fine-tune the development process."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Task Review"})," \u2013 Manual review of task plans using AI, allowing users to optimize their workflow while controlling\ntoken usage."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Core Technical Aspects"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Inference Model-Based Planning"})," \u2013 Tasks are structured using reasoning models like DeepSeek R1, which requires\ncustom prompts for better execution."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interactive Task Management"})," \u2013 Users can mark tasks as complete, open related files, edit plans, and review\nAI-generated strategies."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"By making AI-driven coding tasks more transparent and controllable, AutoDev Planner enhances the development experience,\nallowing users to engage with and refine AI-generated code plans."}),"\n",(0,t.jsx)(n.h3,{id:"design-inside-planner",children:"Design inside Planner"}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.a,{href:"https://www.martinfowler.com/articles/designDead.html",children:"Is Design Dead?"})}),", Fowler concludes that design is far from\ndead, but its role has changed. Instead of being a rigid, upfront process, design in an agile world is ",(0,t.jsx)(n.strong,{children:"continuous,\nincremental, and driven by refactoring and testing"}),". Agile methodologies, particularly Extreme Programming (XP),\nemphasize ",(0,t.jsx)(n.strong,{children:"evolutionary design"}),", allowing architecture to adapt naturally as the system grows."]}),"\n",(0,t.jsxs)(n.p,{children:["As we know, AI models function as ",(0,t.jsx)(n.strong,{children:"black boxes"}),", capable of generating vast amounts of code. While this ability is\npowerful, it can also become ",(0,t.jsx)(n.strong,{children:"harmful at scale"})," if the generated code lacks proper design principles. Poorly\nstructured AI-generated code can lead to ",(0,t.jsx)(n.strong,{children:"technical debt, maintainability issues, and architectural inconsistencies"}),",\nmaking it difficult for teams to evolve their software effectively."]}),"\n",(0,t.jsx)(n.h4,{id:"the-need-for-a-well-designed-ai-agent",children:"The Need for a Well-Designed AI Agent"}),"\n",(0,t.jsxs)(n.p,{children:["To mitigate these risks, we need to design an ",(0,t.jsx)(n.strong,{children:"AI agent"})," that enforces and supports structured software development.\nSuch an agent should focus on:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Planned and Evolutionary Design"})," \u2013 Combining strategic planning with the flexibility to evolve the design over\ntime. Instead of enforcing rigid upfront designs, the AI agent should guide the developer in ",(0,t.jsx)(n.strong,{children:"iterative refinement"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Growing an Architecture"})," \u2013 Ensuring that as the system scales, its architecture remains ",(0,t.jsx)(n.strong,{children:"cohesive and adaptable"}),",\navoiding monolithic, tangled structures."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Simple Design"})," \u2013 Encouraging minimalism and clarity in the codebase, following principles like ",(0,t.jsx)(n.strong,{children:"YAGNI (You Ain\u2019t\nGonna Need It)"})," and ",(0,t.jsx)(n.strong,{children:"KISS (Keep It Simple, Stupid)"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For example, when asking an AI to design a ",(0,t.jsx)(n.strong,{children:"complex frontend page"}),", one good practice is ",(0,t.jsx)(n.strong,{children:"ViewModel splitting"}),".\nInstead of generating a monolithic UI structure, the AI should ",(0,t.jsx)(n.strong,{children:"separate concerns properly"}),", ensuring maintainability\nand reusability. By guiding AI-generated code with solid ",(0,t.jsx)(n.strong,{children:"architectural principles"}),", we can create scalable and\nsustainable software solutions."]}),"\n",(0,t.jsx)(n.h3,{id:"plan-example",children:"Plan Example"}),"\n",(0,t.jsx)(n.p,{children:"Example of a Generated Plan:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Identify Core Workflow Classes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'[\u2713] Search for class definitions containing "Workflow" and "Sketch"'}),"\n",(0,t.jsxs)(n.li,{children:["[\u2713] Analyze the ",(0,t.jsx)(n.code,{children:"execute"})," method in ",(0,t.jsx)(n.code,{children:"SketchRunner"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Analyze AI Flow Execution Stages"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"[\u2713] Identify the context collection phase"}),"\n",(0,t.jsx)(n.li,{children:"[\u2713] Analyze the tool invocation decision module"}),"\n",(0,t.jsx)(n.li,{children:"[\u2713] Trace the code generation pipeline"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Validate Workflow Integrity"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"[\u2713] Check the exception handling mechanism"}),"\n",(0,t.jsx)(n.li,{children:"[\u2713] Confirm version control integration points"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://unitmesh.cc/auto-dev/autodev-plan-sketch.png",alt:""})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);