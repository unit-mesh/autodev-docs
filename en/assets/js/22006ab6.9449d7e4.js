"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4480],{6643:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"development/patterns/by-example","title":"By Example","description":"Finding example content as context to generate as input for the generative AI, based on current user habits.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/development/patterns/by-example.md","sourceDirName":"development/patterns","slug":"/development/patterns/by-example","permalink":"/en/development/patterns/by-example","draft":false,"unlisted":false,"editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/docs/development/patterns/by-example.md","tags":[],"version":"current","frontMatter":{"layout":"default","title":"By Example","nav_order":1,"parent":"Design Patterns","permalink":"/patterns/by-example"},"sidebar":"developmentSidebar","previous":{"title":"Executable Unit Validation","permalink":"/en/development/patterns/executable-unit-validation"},"next":{"title":"Task Driven","permalink":"/en/development/patterns/task-driven"}}');var l=n(4848),o=n(8453);const s={layout:"default",title:"By Example",nav_order:1,parent:"Design Patterns",permalink:"/patterns/by-example"},a=void 0,i={},c=[{value:"Git Commit message Example",id:"git-commit-message-example",level:2},{value:"Code Implementation",id:"code-implementation",level:3},{value:"Template Example",id:"template-example",level:3}];function d(e){const t={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(t.blockquote,{children:["\n",(0,l.jsx)(t.p,{children:"Finding example content as context to generate as input for the generative AI, based on current user habits."}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"git-commit-message-example",children:"Git Commit message Example"}),"\n",(0,l.jsx)(t.p,{children:"Implementation steps:"}),"\n",(0,l.jsxs)(t.ol,{children:["\n",(0,l.jsx)(t.li,{children:"Retrieve version control system (VCS) log providers for the current project."}),"\n",(0,l.jsx)(t.li,{children:"Get the current branch and user."}),"\n",(0,l.jsx)(t.li,{children:"Filter logs based on user or branch."}),"\n",(0,l.jsx)(t.li,{children:"Collect example submission information."}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-kotlin",children:"private fun findExampleCommitMessages(project: Project): String? {\n    val logProviders = VcsProjectLog.getLogProviders(project)\n    logProviders.entries.firstOrNull() ?: return null\n\n    val logProvider = entry.value\n    val branch = logProvider.getCurrentBranch(entry.key) ?: return null\n    val user = logProvider.getCurrentUser(entry.key)\n\n    val logFilter = if (user != null) {\n        VcsLogFilterObject.collection(VcsLogFilterObject.fromUser(user, setOf()))\n    } else {\n        VcsLogFilterObject.collection(VcsLogFilterObject.fromBranch(branch))\n    }\n\n    return collectExamples(logProvider, entry.key, logFilter)\n}\n"})}),"\n",(0,l.jsx)(t.h3,{id:"template-example",children:"Template Example"}),"\n",(0,l.jsx)(t.p,{children:"Write a cohesive yet descriptive commit message for a given diff."}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Make sure to include both information What was changed and Why."}),"\n",(0,l.jsx)(t.li,{children:"Start with a short sentence in imperative form, no more than 50 characters long."}),"\n",(0,l.jsx)(t.li,{children:"Then leave an empty line and continue with a more detailed explanation, if necessary."}),"\n",(0,l.jsx)(t.li,{children:"Explanation should have less than 200 characters."}),"\n"]}),"\n",(0,l.jsx)(t.p,{children:"Follow the Conventional Commits specification, examples:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"fix(authentication): fix password regex pattern case"}),"\n",(0,l.jsx)(t.li,{children:"feat(storage): add support for S3 storage"}),"\n",(0,l.jsx)(t.li,{children:"test(java): fix test case for user controller"}),"\n",(0,l.jsx)(t.li,{children:"docs(docs): add architecture diagram to home page"}),"\n"]}),"\n",(0,l.jsx)(t.p,{children:"#if( $context.historyExamples.length() > 0 )\nHere is History Examples:\n$context.historyExamples\n#end"}),"\n",(0,l.jsx)(t.p,{children:"Diff:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-diff",children:"${context.diffContent}\n\n## Code Example: Testing Code Samples\n\nReference language implementations: `JavaTestContextProvider`, `KotlinTestContextProvider`.\n\nSteps:\n\n1. Retrieve the tested code for the current project.\n2. Find templates based on the tested code: `Controller`, `Service`, default tests, etc.\n- Kotlin: `ControllerTest.kt`, `ServiceTest.kt`, `Test.kt`\n- Java: `ControllerTest.java`, `ServiceTest.java`, `Test.java`\n3. Generate testing code based on templates.\n\n## Document Example\n\nDOC TODO\n"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var r=n(6540);const l={},o=r.createContext(l);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);