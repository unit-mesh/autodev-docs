"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9387],{8340:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"development/prompt-strategy","title":"Prompt Strategy","description":"The AutoDev Prompt Generation Strategy is the core functionality of AutoDev, which can generate optimal code suggestions based on your code context.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/development/prompt-strategy.md","sourceDirName":"development","slug":"/development/prompt-strategy","permalink":"/en/development/prompt-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/docs/development/prompt-strategy.md","tags":[],"version":"current","frontMatter":{"layout":"default","title":"Prompt Strategy","parent":"Development","nav_order":98},"sidebar":"developmentSidebar","previous":{"title":"Dev New Language","permalink":"/en/development/dev-new-language"},"next":{"title":"Code Review","permalink":"/en/development/code-review-prompting"}}');var r=n(4848),i=n(8453);const s={layout:"default",title:"Prompt Strategy",parent:"Development",nav_order:98},c="Prompt Strategy",l={},a=[{value:"Prompt Architecture",id:"prompt-architecture",level:2},{value:"Relevant Context",id:"relevant-context",level:2},{value:"Dual-Prompt for Hidden Details",id:"dual-prompt-for-hidden-details",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"prompt-strategy",children:"Prompt Strategy"})}),"\n",(0,r.jsx)(t.p,{children:"The AutoDev Prompt Generation Strategy is the core functionality of AutoDev, which can generate optimal code suggestions based on your code context."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://unitmesh.cc/auto-dev/autodev-prompt-strategy-1.png",alt:"AutoDev Prompt Example"})}),"\n",(0,r.jsx)(t.p,{children:"Typically, a prompt corresponding to an instruction consists of the following five components:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Action type. For example: ",(0,r.jsx)(t.code,{children:"Code complete"}),", ",(0,r.jsx)(t.code,{children:"Translate to Kotlin"}),", etc."]}),"\n",(0,r.jsxs)(t.li,{children:["Language context (combined with specifications). For example: specifications corresponding to ",(0,r.jsx)(t.code,{children:"Java"}),", ",(0,r.jsx)(t.code,{children:"Kotlin"}),", ",(0,r.jsx)(t.code,{children:"Python"}),"."]}),"\n",(0,r.jsx)(t.li,{children:"Technology stack context (combined with specifications). For example: specifications for Controller, Service, Repository."}),"\n",(0,r.jsx)(t.li,{children:"Relevant context (ClassProvider). For example: current file, current directory, current project, all files in the current project."}),"\n",(0,r.jsx)(t.li,{children:"Code (PsiElement). Current code."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Different languages implement ContextPrompter through their own modules, such as JavaContextPrompter, KotlinContextPrompter, etc."}),"\n",(0,r.jsx)(t.h2,{id:"prompt-architecture",children:"Prompt Architecture"}),"\n",(0,r.jsx)(t.p,{children:"Therefore, AutoDev adopts a modular architecture inspired by Intellij Rust and JetBrains AI Assistant, as shown in the following diagram:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://unitmesh.cc/auto-dev/autodev-prompt-strategy-2.png",alt:"AutoDev Prompt Example"})}),"\n",(0,r.jsxs)(t.p,{children:["Each language module implements the corresponding ",(0,r.jsx)(t.strong,{children:"language context"})," and ",(0,r.jsx)(t.strong,{children:"technology stack context"})," based on abstract interfaces. This requires reading dependency-related information such as gradle, maven, package.json, etc."]}),"\n",(0,r.jsx)(t.h2,{id:"relevant-context",children:"Relevant Context"}),"\n",(0,r.jsx)(t.p,{children:"AutoDev provides the following types of relevant context:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Static code analysis approach: Generates corresponding context information by combining import syntax and function input/output.","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Corresponding implementation class: [JavaContextPrompter]"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["Cosine Similarity calculation for code chunk similarity among the 20 most recently opened files. This is one of the implementation methods used by GitHub Copilot and JetBrains AI Assistant.","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Corresponding implementation class: [SimilarChunksWithPaths]"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://unitmesh.cc/auto-dev/autodev-prompt-strategy-3.png",alt:"AutoDev Similar Chunk"})}),"\n",(0,r.jsx)(t.h2,{id:"dual-prompt-for-hidden-details",children:"Dual-Prompt for Hidden Details"}),"\n",(0,r.jsx)(t.p,{children:"In AutoDev, complex prompts are implemented through two separate prompts, as shown below:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:'abstract class ContextPrompter {\n  open fun displayPrompt(): String = ""\n  open fun requestPrompt(): String = ""\n  ...\n}\n'})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"displayPrompt"}),": The prompt displayed to users, e.g., ",(0,r.jsx)(t.code,{children:"Code complete"}),", ",(0,r.jsx)(t.code,{children:"Translate to Kotlin"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"requestPrompt"}),": The prompt sent to AI services, e.g., ",(0,r.jsx)(t.code,{children:"Code complete:\\n${METHOD_INPUT_OUTPUT}\\n${SPEC_controller}\\n\\n${SELECTION}"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Depending on the scenario, certain details (such as related code chunks, input/output) may be hidden in the user-facing prompt."})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var o=n(6540);const r={},i=o.createContext(r);function s(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);