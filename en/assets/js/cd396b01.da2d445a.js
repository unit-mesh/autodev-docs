"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9155],{5676:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"development/git-commit-prompting","title":"Git Commit","description":"Git commit Prompt example","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/development/git-commit-prompting.md","sourceDirName":"development","slug":"/development/git-commit-prompting","permalink":"/en/development/git-commit-prompting","draft":false,"unlisted":false,"editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/docs/development/git-commit-prompting.md","tags":[],"version":"current","frontMatter":{"layout":"default","title":"Git Commit","nav_order":10,"parent":"Development"},"sidebar":"developmentSidebar","previous":{"title":"Code Review","permalink":"/en/development/code-review-prompting"},"next":{"title":"Refactoring Prompt","permalink":"/en/development/refactoring-prompt"}}');var r=n(4848),a=n(8453);const s={layout:"default",title:"Git Commit",nav_order:10,parent:"Development"},o=void 0,c={},l=[];function p(e){const t={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Git commit Prompt example"}),"\n",(0,r.jsx)(t.p,{children:"Write a cohesive yet descriptive commit message for a given diff.\nMake sure to include both information What was changed and Why.\nStart with a short sentence in imperative form, no more than 50 characters long.\nThen leave an empty line and continue with a more detailed explanation, if necessary.\nExplanation should have less than 200 characters."}),"\n",(0,r.jsx)(t.p,{children:"examples:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"fix(authentication): add password regex pattern"}),"\n",(0,r.jsx)(t.li,{children:"feat(storage): add new test cases"}),"\n",(0,r.jsx)(t.li,{children:"test(java): fix test case for user controller"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Diff:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-diff",children:'modify file src/main/kotlin/cc/unitmesh/devti/prompting/VcsPrompting.kt\n     private val defaultIgnoreFilePatterns: List<PathMatcher> = listOf(\n         "**/*.md", "**/*.json", "**/*.jsonl", "**/*.txt", "**/*.xml", "**/*.yml", "**/*.yaml", "**/*.html",\n         "**/*.log", "**/*.tmp", "**/*.temp", "**/*.bak", "**/*.swp",\n-         "**/*.svg",\n+        "**/*.svg",\n     ).map {\n         FileSystems.getDefault().getPathMatcher("glob:$it")\n     }\n         project: Project,\n         ignoreFilePatterns: List<PathMatcher> = defaultIgnoreFilePatterns,\n     ): String? {\n+        val changeText = project.service<DiffSimplifier>().simplify(selectList, ignoreFilePatterns)\n+\n+        if (changeText.isEmpty()) {\n+            return null\n+        }\n+\n+        val processedText = DiffSimplifier.postProcess(changeText)\n         val writer = StringWriter()\n         if (details.isNotEmpty()) {\n             details.forEach { writer.write(it.fullMessage + "\\n\\n") }\n         }\n-        writer.write("Changes:\\n\\n")\n-        val changeText = project.service<DiffSimplifier>().simplify(selectList, ignoreFilePatterns)\n-\n-        if (changeText.isEmpty()) {\n-            return null\n-        }\n+        writer.write(\n+            """\n+            Changes:\n+            \n+            ```patch\n+            $processedText\n+            ```\n+            """.trimIndent()\n+        )\n-\n-\n-        writer.write("```patch\\n\\n")\n-        writer.write(DiffSimplifier.postProcess(changeText))\n-        writer.write("\\n\\n```\\n\\n")\n-\n         return writer.toString()\n     }\n     fun hasChanges(): List<Change> {\n-        val changeListManager = ChangeListManagerImpl.getInstance(project)\n-        val changes = changeListManager.changeLists.flatMap {\n-            it.changes\n-        }\n-\n-        return changes\n+        val changeListManager = ChangeListManager.getInstance(project)\n+        return changeListManager.changeLists.flatMap { it.changes }\n     }\n }\n'})})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(6540);const r={},a=i.createContext(r);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);