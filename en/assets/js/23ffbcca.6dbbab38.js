"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3563],{515:e=>{e.exports=JSON.parse('{"permalink":"/en/blog/2024/01/12/autodev-1-5-3","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2024-01-12-autodev-1-5-3.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2024-01-12-autodev-1-5-3.md","title":"AutoDev 1.5.3 Precision Test Generation","description":"At the beginning of last year, our original intention for open-sourcing AutoDev was:","date":"2024-01-12T00:00:00.000Z","tags":[],"readingTime":2.69,"hasTruncateMarker":false,"authors":[],"frontMatter":{"layout":"default","title":"AutoDev 1.5.3 Precision Test Generation","nav_order":5},"unlisted":false,"prevItem":{"title":"AutoDev 1.6.0 - Precise Page Generation and SQL Generation","permalink":"/en/blog/2024/01/26/autodev-1-6-0"},"nextItem":{"title":"AutoDev Coder","permalink":"/en/blog/autodev-coder"}}')},8273:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var i=n(515),o=n(4848),r=n(8453);const s={layout:"default",title:"AutoDev 1.5.3 Precision Test Generation",nav_order:5},a=void 0,l={authorsImageUrls:[]},c=[{value:"1. Precision Test Generation",id:"1-precision-test-generation",level:2},{value:"Precise Context",id:"precise-context",level:3},{value:"Unit Test Templates: Team AI",id:"unit-test-templates-team-ai",level:3},{value:"Accurate API Test Data Generation",id:"accurate-api-test-data-generation",level:3},{value:"2. Local Model Optimization",id:"2-local-model-optimization",level:2},{value:"Public Model Knowledge Distillation",id:"public-model-knowledge-distillation",level:3},{value:"Plugin Prompt Overriding",id:"plugin-prompt-overriding",level:3},{value:"3. Multi-Language Documentation",id:"3-multi-language-documentation",level:2},{value:"4. Automation Workflow Optimization",id:"4-automation-workflow-optimization",level:2},{value:"PrePush Review",id:"prepush-review",level:3},{value:"Streamlined Commit Messages",id:"streamlined-commit-messages",level:3},{value:"Future Focus",id:"future-focus",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"At the beginning of last year, our original intention for open-sourcing AutoDev was:"}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"AutoDev is an open-source AI-assisted programming plugin for JetBrains IDEs. It can directly integrate with your requirement management systems (such as Jira, Trello, Github Issues, etc.). Within the IDE, with simple clicks, AutoDev automatically generates code based on your requirements. All you need to do is perform quality checks on the generated code. @"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Today we've taken another step toward this goal: one-click generation of precision unit tests. In this article, we'll introduce features from version 1.4 (Team AI for teams) to version 1.5.3:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Precision automated test generation"}),". Enhanced static code analysis for more accurate constructor generation; optimized prompts distinguishing testing approaches for Spring Controllers vs Services; added multiple test template types."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Local model enhancements"}),". Provided AutoDev Coder dataset and models tailored for AutoDev; supported local data recording for knowledge distillation; allowed partial system prompt overriding for better custom model utilization."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Multi-language documentation"}),". Added support for JavaScript, Rust, Python, and improved Kotlin documentation generation logic."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Automation workflow optimization"}),". Introduced PrePush Review for AI-assisted code review before commit; streamlined commit message context with differentiated file/dependency change handling to reduce token usage."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Join us at: ",(0,o.jsx)(t.a,{href:"https://github.com/unit-mesh/auto-dev/",children:"https://github.com/unit-mesh/auto-dev/"})," to build your own AI-assisted full-cycle coding companion."]}),"\n",(0,o.jsx)(t.p,{children:"During development, we selected ArchGuard - an open-source architecture governance platform built with Kotlin - as the pilot project for AutoDev's full-cycle AI assistance, continuously accumulating data and experience to better support Kotlin development."}),"\n",(0,o.jsx)(t.h2,{id:"1-precision-test-generation",children:"1. Precision Test Generation"}),"\n",(0,o.jsx)(t.p,{children:"Drawing from experience generating 200+ tests across 90 test classes in ArchGuard, we've continuously optimized test generation logic (though some bugs may remain)."}),"\n",(0,o.jsxs)(t.p,{children:["AutoDev can now ",(0,o.jsx)(t.strong,{children:"directly generate"})," ready-to-use unit tests with certain probability."]}),"\n",(0,o.jsx)(t.h3,{id:"precise-context",children:"Precise Context"}),"\n",(0,o.jsx)(t.p,{children:"Current version provides test context containing:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Related class information"}),"\n",(0,o.jsx)(t.li,{children:"Complete input/output class details"}),"\n",(0,o.jsx)(t.li,{children:"Static analysis of Service-related information"}),"\n",(0,o.jsx)(t.li,{children:"Function parameter/return type analysis"}),"\n",(0,o.jsx)(t.li,{children:"Spring component detection (Controller/Service) with testing rule suggestions"}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["See implementations: ",(0,o.jsx)(t.code,{children:"JavaTestContextProvider"}),", ",(0,o.jsx)(t.code,{children:"KotlinTestContextProvider"})]}),"\n",(0,o.jsx)(t.h3,{id:"unit-test-templates-team-ai",children:"Unit Test Templates: Team AI"}),"\n",(0,o.jsx)(t.p,{children:"To handle project-specific requirements (like special annotations in ArchGuard), we introduced customizable test templates for Controllers, Services, and other components. Manage templates through prompt-as-code approach and share within teams."}),"\n",(0,o.jsxs)(t.p,{children:["Documentation: ",(0,o.jsx)(t.a,{href:"https://ide.unitmesh.cc/customize/custom-test-template.html",children:"https://ide.unitmesh.cc/customize/custom-test-template.html"})]}),"\n",(0,o.jsx)(t.h3,{id:"accurate-api-test-data-generation",children:"Accurate API Test Data Generation"}),"\n",(0,o.jsxs)(t.p,{children:["Enhanced static analysis for API test data generation through ",(0,o.jsx)(t.code,{children:"JavaTestDataBuilder"})," and ",(0,o.jsx)(t.code,{children:"KotlinTestDataBuilder"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"2-local-model-optimization",children:"2. Local Model Optimization"}),"\n",(0,o.jsxs)(t.p,{children:["Configure private model settings via ",(0,o.jsx)(t.code,{children:"AutoDev Coder"})," in plugin preferences:"]}),"\n",(0,o.jsx)(t.h3,{id:"public-model-knowledge-distillation",children:"Public Model Knowledge Distillation"}),"\n",(0,o.jsxs)(t.p,{children:["New ",(0,o.jsx)(t.code,{children:"Recording Instruction In Local"})," feature enables:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Recording AI interaction data"}),"\n",(0,o.jsx)(t.li,{children:"Internal model fine-tuning samples"}),"\n",(0,o.jsx)(t.li,{children:"AutoDev debugging support"}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"plugin-prompt-overriding",children:"Plugin Prompt Overriding"}),"\n",(0,o.jsx)(t.p,{children:"Override core chat prompts:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Explain code"}),"\n",(0,o.jsx)(t.li,{children:"Refactor code"}),"\n",(0,o.jsx)(t.li,{children:"Fix issue"}),"\n",(0,o.jsx)(t.li,{children:"Generate test"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"More context interfaces coming via template approach."}),"\n",(0,o.jsx)(t.h2,{id:"3-multi-language-documentation",children:"3. Multi-Language Documentation"}),"\n",(0,o.jsx)(t.p,{children:"Added documentation generation support for:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Python"}),"\n",(0,o.jsx)(t.li,{children:"Rust"}),"\n",(0,o.jsx)(t.li,{children:"JavaScript"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Optimized Kotlin handling to prevent redundant function comments from OpenAI."}),"\n",(0,o.jsx)(t.h2,{id:"4-automation-workflow-optimization",children:"4. Automation Workflow Optimization"}),"\n",(0,o.jsx)(t.h3,{id:"prepush-review",children:"PrePush Review"}),"\n",(0,o.jsx)(t.p,{children:"AI-assisted preliminary code review before commit."}),"\n",(0,o.jsx)(t.h3,{id:"streamlined-commit-messages",children:"Streamlined Commit Messages"}),"\n",(0,o.jsx)(t.p,{children:"Refined commit message generation through 167 real-world cases in ArchGuard, implementing token-efficient context handling."}),"\n",(0,o.jsx)(t.h2,{id:"future-focus",children:"Future Focus"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Enhanced workflow automation"}),": Better forward/backward process integration"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"UX improvements"}),": Loading states and error handling upgrades"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Test coverage expansion"}),": Adding more unit tests for stability"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Contribute at: ",(0,o.jsx)(t.a,{href:"https://github.com/unit-mesh/auto-dev/",children:"https://github.com/unit-mesh/auto-dev/"})]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var i=n(6540);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);