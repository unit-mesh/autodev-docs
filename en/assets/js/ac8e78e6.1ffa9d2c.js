"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1202],{5526:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"development/dev-new-language","title":"Dev New Language","description":"If you want to develop a new language for AutoDev, you can follow this guide.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/development/dev-new-language.md","sourceDirName":"development","slug":"/development/dev-new-language","permalink":"/en/development/dev-new-language","draft":false,"unlisted":false,"editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/docs/development/dev-new-language.md","tags":[],"version":"current","frontMatter":{"layout":"default","title":"Dev New Language","nav_order":2,"parent":"Development"},"sidebar":"developmentSidebar","previous":{"title":"Debug New Language","permalink":"/en/development/debug-new-language"},"next":{"title":"Prompt Strategy","permalink":"/en/development/prompt-strategy"}}');var i=n(4848),r=n(8453);const l={layout:"default",title:"Dev New Language",nav_order:2,parent:"Development"},s=void 0,a={},d=[{value:"AutoDev Extension Point",id:"autodev-extension-point",level:2},{value:"CodeDataStructure Context Provider",id:"codedatastructure-context-provider",level:3},{value:"Chat Context Provider",id:"chat-context-provider",level:3},{value:"Test Context Provider",id:"test-context-provider",level:3},{value:"Living Documentation",id:"living-documentation",level:3},{value:"API TestDataBuilder",id:"api-testdatabuilder",level:3},{value:"contextPrompter",id:"contextprompter",level:3},{value:"Custom Prompt Provider",id:"custom-prompt-provider",level:3}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"If you want to develop a new language for AutoDev, you can follow this guide."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["lookup the plugin in ",(0,i.jsx)(t.a,{href:"https://plugins.jetbrains.com/",children:"JetBrains' Plugin Repository"})]}),"\n",(0,i.jsxs)(t.li,{children:["create new language plugin module in AutoDev.","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["set dependencies in ",(0,i.jsx)(t.code,{children:"build.gradle.kts"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["set dependencies in ",(0,i.jsx)(t.code,{children:"settings.gradle.kts"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["create plugin module file under ",(0,i.jsx)(t.code,{children:"newlang/src/main/resources/cc.unitmesh.<newlang>.xml"})]}),"\n",(0,i.jsxs)(t.li,{children:["declare plugin module in ",(0,i.jsx)(t.code,{children:"plugin/src/main/plugin.xml"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:"implement the plugin module."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"autodev-extension-point",children:"AutoDev Extension Point"}),"\n",(0,i.jsx)(t.h3,{id:"codedatastructure-context-provider",children:"CodeDataStructure Context Provider"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"CodeDataStructure will provide the data structure for code, like file, class, method, variable, etc. Which will be\nused in Test Generation, Code Complete, Code Refactor, etc."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["At beginning, we use ",(0,i.jsx)(t.a,{href:"https://github.com/phodal/chapi",children:"Chapi"})," to parse code data structure, but it's too slow.\nAnd, we found that JetBrains' IDE already have a good data structure, so we use it. We follow JetBrains' code data\nstructure and design."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<extensions defaultExtensionNs="cc.unitmesh">\n   <fileContextBuilder language="Rust"\n                       implementationClass="cc.unitmesh.rust.context.RustFileContextBuilder"/>\n   <classContextBuilder language="Rust"\n                        implementationClass="cc.unitmesh.rust.context.RustClassContextBuilder"/>\n   <methodContextBuilder language="Rust"\n                         implementationClass="cc.unitmesh.rust.context.RustMethodContextBuilder"/>\n   <variableContextBuilder language="Rust"\n                           implementationClass="cc.unitmesh.rust.context.RustVariableContextBuilder"/>\n</extensions>\n'})}),"\n",(0,i.jsx)(t.h3,{id:"chat-context-provider",children:"Chat Context Provider"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Chat Context Provider will provide the data structure for chat, like Language version, Compiler version, Framework\ninformation, etc."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Similar to CodeDataStructure Context Provider, we use JetBrains' design for Chat Context Provider. You can implement\nmultiple Chat Context Providers for same languages."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<chatContextProvider implementation="cc.unitmesh.rust.provider.RustVersionContextProvider"/>\n<chatContextProvider implementation="cc.unitmesh.rust.provider.RustCompilerContextProvider"/>\n'})}),"\n",(0,i.jsx)(t.h3,{id:"test-context-provider",children:"Test Context Provider"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Test Context will collect that context for test generation, and with CodeModifier to generate test code."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<testContextProvider language="Rust" implementation="cc.unitmesh.rust.provider.RustTestService"/>\n\n<codeModifier language="Rust" implementationClass="cc.unitmesh.rust.provider.RustCodeModifier"/>\n'})}),"\n",(0,i.jsx)(t.h3,{id:"living-documentation",children:"Living Documentation"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Living Documentation will provide the living documentation for user, and also can generate the comments."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<livingDocumentationProvider language="Rust" implementation="cc.unitmesh.rust.provider.RustLivingDocumentationProvider"/>\n'})}),"\n",(0,i.jsx)(t.h3,{id:"api-testdatabuilder",children:"API TestDataBuilder"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"API TestDataBuilder will provide the API test data for user, like API test data, API test code, etc."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<testDataBuilder language="kotlin"\n             implementationClass="cc.unitmesh.kotlin.provider.KotlinTestDataBuilder"/>\n'})}),"\n",(0,i.jsx)(t.h3,{id:"contextprompter",children:"contextPrompter"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Context Prompter will provide the context prompt rules for user, like display and request prompts."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<contextPrompter\n          language="kotlin"\n          implementation="cc.unitmesh.kotlin.provider.KotlinContextPrompter"/>\n'})}),"\n",(0,i.jsx)(t.h3,{id:"custom-prompt-provider",children:"Custom Prompt Provider"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"customPromptProvider will provide the custom prompt functions for user."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<customPromptProvider\n        language="kotlin"\n        implementationClass="cc.unitmesh.kotlin.provider.KotlinCustomPromptProvider"/>\n'})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>s});var o=n(6540);const i={},r=o.createContext(i);function l(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);