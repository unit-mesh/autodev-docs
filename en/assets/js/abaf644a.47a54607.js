"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3096],{4697:e=>{e.exports=JSON.parse('{"permalink":"/en/blog/2025/01/11/autodev-2-0-preview","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2025-01-11-autodev-2-0-preview.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025-01-11-autodev-2-0-preview.md","title":"AutoDev Composer\uff1athe Intellij IDEA Cursor Alternative","description":"A little over two weeks ago, after the release of DeepSeek V3, we introduced multi-file editing capabilities for Shire.","date":"2025-01-11T00:00:00.000Z","tags":[],"readingTime":3.4,"hasTruncateMarker":true,"authors":[],"frontMatter":{"layout":"default","title":"AutoDev Composer\uff1athe Intellij IDEA Cursor Alternative","nav_order":9},"unlisted":false,"prevItem":{"title":"AutoDev Bridge","permalink":"/en/blog/2025/03/06/autodev-bridge"},"nextItem":{"title":"Agent Language - DevIns","permalink":"/en/blog/2024/03/17/autodev-devins-language"}}')},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var o=n(6540);const r={},i=o.createContext(r);function s(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:t},e.children)}},8854:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var o=n(4697),r=n(4848),i=n(8453);const s={layout:"default",title:"AutoDev Composer\uff1athe Intellij IDEA Cursor Alternative",nav_order:9},a=void 0,l={authorsImageUrls:[]},d=[{value:"<strong>Decoding AutoDev Composer System Prompts</strong>",id:"decoding-autodev-composer-system-prompts",level:3},{value:"<strong>Project Context</strong>",id:"project-context",level:4},{value:"<strong>Tool Context</strong>",id:"tool-context",level:4},{value:"<strong>Thought Process</strong>",id:"thought-process",level:3},{value:"<strong>AutoDev Developer Experience: Sketch Mode</strong>",id:"autodev-developer-experience-sketch-mode",level:3},{value:"<strong>Diff Sketch Mode</strong>",id:"diff-sketch-mode",level:4},{value:"<strong>Terminal Sketch Mode</strong>",id:"terminal-sketch-mode",level:4},{value:"<strong>Mermaid and PlantUML Sketch Modes</strong>",id:"mermaid-and-plantuml-sketch-modes",level:4},{value:"<strong>Other</strong>",id:"other",level:3}];function c(e){const t={a:"a",br:"br",code:"code",em:"em",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"A little over two weeks ago, after the release of DeepSeek V3, we introduced multi-file editing capabilities for Shire."}),"\n",(0,r.jsx)(t.p,{children:"Following extensive testing, we discovered that DeepSeek V3 performs exceptionally well in programming scenarios,\nespecially in multi-file editing contexts."}),"\n",(0,r.jsxs)(t.p,{children:["This inspired us to add a new feature\u2014",(0,r.jsx)(t.strong,{children:"AutoDev Composer"}),"\u2014to AutoDev, which had long lacked major updates. In\ndeveloping this feature, we drew inspiration from a number of mature tools:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The impressive ",(0,r.jsx)(t.strong,{children:"Sketch rendering mechanism"})," on Shire"]}),"\n",(0,r.jsxs)(t.li,{children:["Complex ",(0,r.jsx)(t.strong,{children:"system prompts"})," from tools like Cursor and WindSurf"]}),"\n",(0,r.jsxs)(t.li,{children:["The bug-ridden ",(0,r.jsx)(t.strong,{children:"StreamDiff mode"})," from Continue"]}),"\n",(0,r.jsx)(t.li,{children:"\u2026and more"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Now, there\u2019s no need to switch to a VSCode-like IDE to craft prompts and then return to IntelliJ IDEA for debugging.\nWith AutoDev Composer, you can handle everything directly within IntelliJ IDEA."}),"\n",(0,r.jsx)(t.p,{children:"As an amateur project, we\u2019ve put in a lot of effort to make this happen! \ud83d\ude0a"}),"\n",(0,r.jsx)(t.p,{children:"Introduction paragraph text here."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"decoding-autodev-composer-system-prompts",children:(0,r.jsx)(t.strong,{children:"Decoding AutoDev Composer System Prompts"})}),"\n",(0,r.jsx)(t.h4,{id:"project-context",children:(0,r.jsx)(t.strong,{children:"Project Context"})}),"\n",(0,r.jsx)(t.p,{children:"In Composer mode, you can still experience our understanding of software engineering and our extensive expertise in\nsoftware component analysis. Below is the basic contextual prompt for AutoDev Composer:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-markdown",children:"- The USER's OS version is Mac OS X 15.2 x86_64\n- The absolute path of the USER's workspaces is: /Users/phodal/IdeaProjects/untitled\n- This workspace uses Gradle and Java JDK_11\n- The user's shell is /bin/bash\n- User's workspace context is: This project uses MariaDB 11.5.2-MariaDB, Spring Boot 2.7.10, Spring MVC, and JDBC to\n  build RESTful APIs.\n- Current time is: 2025-01-20 11:23:59  \n"})}),"\n",(0,r.jsx)(t.p,{children:"We gather system, workspace, toolchain, database, and language environment information to help you work more\nefficiently. For example, when writing CRUD code, AutoDev generates corresponding code based on your database\ninformation."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"tool-context",children:(0,r.jsx)(t.strong,{children:"Tool Context"})}),"\n",(0,r.jsx)(t.p,{children:"Unlike FunctionTool, we firmly believe that DSLs (Domain-Specific Languages) are the best approach for generative AI\nsolutions. Therefore, AutoDev adopts a DevIns DSL tool-calling mechanism:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-markdown",children:"<tool>name: file, desc: Read the content of a file by project relative path, example:  \n<devin>  \nLocate a specific file (the file must exist in the specified path)  \n/file:.github/dependabot.yml#L1C1-L2C12  \nSearch globally by file name (case-sensitive, no path required)  \n/file:PythonFrameworkContextProvider.kt  \n</devin>  \n"})}),"\n",(0,r.jsx)(t.p,{children:"Since the tool\u2019s documentation is part of the code and test suite, it allows for the generation of precise and reliable\nprompts."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"thought-process",children:(0,r.jsx)(t.strong,{children:"Thought Process"})}),"\n",(0,r.jsxs)(t.p,{children:["Given the complexity of the AutoDev DSL tools, we referenced WindSurf\u2019s prompt generation approach and introduced a\nstep-by-step ",(0,r.jsx)(t.strong,{children:"thought process"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-markdown",children:"# Step 1. Create `routes.py`\n\nI\u2019ve created `routes.py` to define the `/upload` and `/query` endpoints. Additionally, I\u2019ve added `/` as the endpoint\nfor `main.html`.\n\n# Step 2. Create `main.js`\n\nI\u2019ve created a dedicated `main.js` file to store all the interactive front-end code. It defines UI elements for\ndisplaying windows and buttons and creates event listeners for these buttons.  \n"})}),"\n",(0,r.jsx)(t.p,{children:"This allows us to provide additional examples for the AI model, which has proven to learn remarkably well."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"autodev-developer-experience-sketch-mode",children:(0,r.jsx)(t.strong,{children:"AutoDev Developer Experience: Sketch Mode"})}),"\n",(0,r.jsxs)(t.p,{children:["Although AutoDev is now an amateur project, we firmly believe that understanding developer experience is at the core of\nAI-assisted development. For this reason, we\u2019ve introduced Sketch mode from Shire\u2019s intelligent agent language into\nAutoDev Composer. With Sketch, you can transform code into ",(0,r.jsx)(t.em,{children:"everything"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Simply put, Markdown is rendered with various UIs to enable better interactivity."}),"\n",(0,r.jsx)(t.h4,{id:"diff-sketch-mode",children:(0,r.jsx)(t.strong,{children:"Diff Sketch Mode"})}),"\n",(0,r.jsx)(t.p,{children:"With Diff Sketch mode, you can quickly understand AI-generated code changes and decide how to handle them: view the\nsource file, examine the diff, or apply the changes directly."}),"\n",(0,r.jsx)(t.p,{children:"Since we currently lack the capacity to offer a diff model like Cursor, we\u2019ve implemented a repair model. When patches\ncannot be accurately identified, the model is called again for corrections."}),"\n",(0,r.jsx)(t.h4,{id:"terminal-sketch-mode",children:(0,r.jsx)(t.strong,{children:"Terminal Sketch Mode"})}),"\n",(0,r.jsx)(t.p,{children:"In AutoDev, the Terminal Sketch mode allows you to execute scripts or pop out a terminal (similar to Cursor), enabling\nyou to run commands and view the results conveniently."}),"\n",(0,r.jsx)(t.h4,{id:"mermaid-and-plantuml-sketch-modes",children:(0,r.jsx)(t.strong,{children:"Mermaid and PlantUML Sketch Modes"})}),"\n",(0,r.jsx)(t.p,{children:"When you install the Mermaid or PlantUML plugins, you can use their respective Sketch modes to convert your code into\nflowcharts, sequence diagrams, and more."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"other",children:(0,r.jsx)(t.strong,{children:"Other"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Download and try it out:"}),(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.a,{href:"https://github.com/unit-mesh/auto-dev/releases",children:"https://github.com/unit-mesh/auto-dev/releases"})]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"`"})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);