"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7916],{4983:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"mcp/mcp-client","title":"AutoDev as MCP Client","description":"Since we need to support AutoDev DevIns use MCP tools, we current only support Stdio-based transport.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/mcp/mcp-client.md","sourceDirName":"mcp","slug":"/mcp/mcp-client","permalink":"/en/mcp/mcp-client","draft":false,"unlisted":false,"editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/docs/mcp/mcp-client.md","tags":[],"version":"current","frontMatter":{"layout":"default","title":"AutoDev as MCP Client","nav_order":2,"parent":"MCP"},"sidebar":"agenticSidebar","previous":{"title":"Develop MCP Server","permalink":"/en/mcp/development"},"next":{"title":"MCP Debugger","permalink":"/en/mcp/mcp-debugger"}}');var r=t(4848),o=t(8453);const i={layout:"default",title:"AutoDev as MCP Client",nav_order:2,parent:"MCP"},l=void 0,c={},a=[{value:"How to use",id:"how-to-use",level:2},{value:"MCP as DevIns",id:"mcp-as-devins",level:3},{value:"Test MCP Server",id:"test-mcp-server",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Since we need to support AutoDev DevIns use MCP tools, we current only support Stdio-based transport."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Configure the MCP client in ",(0,r.jsx)(n.code,{children:"Settings"}),", ",(0,r.jsx)(n.code,{children:"AutoDev"}),", ",(0,r.jsx)(n.code,{children:"Custom Agent"})," MCP Servers"]}),"\n",(0,r.jsx)(n.li,{children:"Add your MCP Server, for example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "filesystem": {\n      "command": "npx",\n      "args": [\n        "-y",\n        "@modelcontextprotocol/server-filesystem",\n        "/Volumes/source/ai/autocrud"\n      ]\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Java examples:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "weather": {\n      "command": "java",\n      "args": [\n        "-jar",\n        "/Volumes/source/ai/autodev-mcp-test/kotlin-weather-stdio-server/build/libs/weather-stdio-server-0.1.0-all.jar"\n      ]\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Python + UV examples:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "echo": {\n      "command": "uv",\n      "args": [\n        "run",\n        "--with",\n        "--directory",\n        "/Users/phodal/source/ai/autodev-mcp-test/python-sqlite3/",\n        "mcp",\n        "mcp",\n        "run",\n        "/Users/phodal/source/ai/autodev-mcp-test/python-sqlite3/server.py"\n      ]\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mcp-as-devins",children:"MCP as DevIns"}),"\n",(0,r.jsxs)(n.p,{children:["In AutoDev, the MCP tool will be converted to DevIns instruction. For example, the ",(0,r.jsx)(n.code,{children:"read_multiple_files"})," tool will be\nconverted to:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<tool>name: read_multiple_files, desc: Read the contents of multiple files simultaneously. This is more efficient than\n    reading files one by one when you need to analyze or compare multiple files. Each file\'s content is returned with\n    its path as a reference. Failed reads for individual files won\'t stop the entire operation. Only works within\n    allowed directories., example:\n    <devin>\n        Here is command and JSON schema\n        /read_multiple_files\n        ```json\n        {"properties":{"paths":{"type":"array","items":{"type":"string"}}},"required":["paths"]}\n        \\```\n    </devin>\n</tool>\n'})}),"\n",(0,r.jsx)(n.p,{children:"then Sketch, Bridge agent can use in the DevIns instruction."}),"\n",(0,r.jsx)(n.h3,{id:"test-mcp-server",children:"Test MCP Server"}),"\n",(0,r.jsxs)(n.p,{children:["Create a new ",(0,r.jsx)(n.code,{children:"sample.devin"})," file with the following content:"]}),"\n",(0,r.jsx)(n.p,{children:"/list_directory"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n "path": "/Volumes/source/ai/autocrud/docs/mcp"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then run the following command, will return the list of files in the directory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'Execute list_directory tool\'s result\n[\n    {\n        "text": "[FILE] mcp-client.md\\n[FILE] mcp-server.md\\n[FILE] mcp.md"\n    }\n]\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);