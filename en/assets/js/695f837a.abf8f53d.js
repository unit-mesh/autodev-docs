"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4970],{7556:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"workflow/auto-test","title":"AutoTest","description":"Design Principle","source":"@site/docs/workflow/auto-test.md","sourceDirName":"workflow","slug":"/workflow/auto-test","permalink":"/en/workflow/auto-test","draft":false,"unlisted":false,"editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/docs/workflow/auto-test.md","tags":[],"version":"current","frontMatter":{"layout":"default","title":"AutoTest","nav_order":5,"parent":"Development"},"sidebar":"tutorialSidebar","previous":{"title":"AutoSQL","permalink":"/en/workflow/auto-sql"},"next":{"title":"Workflow","permalink":"/en/workflow/"}}');var o=n(4848),i=n(8453);const r={layout:"default",title:"AutoTest",nav_order:5,parent:"Development"},l="AutoTest Design",a={},d=[{value:"Design Principle",id:"design-principle",level:2},{value:"Test Prompts",id:"test-prompts",level:2},{value:"Resources",id:"resources",level:2},{value:"TestSpark",id:"testspark",level:3},{value:"Method 1: LLM gen prompt example",id:"method-1-llm-gen-prompt-example",level:4},{value:"Method 2: EvoSuite gen",id:"method-2-evosuite-gen",level:4}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"autotest-design",children:"AutoTest Design"})}),"\n",(0,o.jsx)(t.h2,{id:"design-principle",children:"Design Principle"}),"\n",(0,o.jsx)(t.p,{children:"Create rule:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"if test code exists and LLM returns with import syntax, AutoDev will replace all code."}),"\n",(0,o.jsx)(t.li,{children:"if test code exists and LLM returns with no import syntax, AutoDev will insert test code after the last import statement."}),"\n",(0,o.jsx)(t.li,{children:"if test code does not exist, AutoDev will insert test code."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Run rule:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"if run configuration exists, AutoDev will create a new run configuration."}),"\n",(0,o.jsx)(t.li,{children:"if run configuration does not exist, AutoDev will create a new run configuration."}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["For more, see in ",(0,o.jsx)(t.a,{href:"https://github.com/unit-mesh/auto-dev/blob/master/src/main/kotlin/cc/unitmesh/devti/provider/AutoTestService.kt",children:"AutoTestService"})]}),"\n",(0,o.jsx)(t.h2,{id:"test-prompts",children:"Test Prompts"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-markdown",children:'    Write unit test for the following Kotlin code.\n    \n    You are working on a project that uses Spring MVC, Spring WebFlux to build RESTful APIs.\n    - You MUST use should_xx_xx style for test method name, You MUST use given-when-then style.\n    - Test file should be complete and compilable, without need for further actions.\n    - Ensure that each test focuses on a single use case to maintain clarity and readability.\n    - Instead of using `@BeforeEach` methods for setup, include all necessary code initialization within each individual test method, do not write parameterized tests.\n    - This project uses JUnit 5, you should import `org.junit.jupiter.api.Test` and use `@Test` annotation.\n    - Use appropriate Spring test annotations such as `@MockBean`, `@Autowired`, `@WebMvcTest`, `@DataJpaTest`, `@AutoConfigureTestDatabase`, `@AutoConfigureMockMvc`, `@SpringBootTest` etc.\n      Here is a template as example\n    \\```Kotlin\n    // You Must use @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n    @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n    @ExtendWith(SpringExtension::class)\n    class PluginControllerTest {\n    \n        private lateinit var mockMvc: MockMvc\n    \n        @BeforeEach\n        fun setup() {\n            // You can use MockMvcBuilders.standaloneSetup() to build mockMvc\n            mockMvc = MockMvcBuilders.standaloneSetup(PluginController()).build()\n        }\n    \n        @Test\n        fun shouldReturnPluginTypes() {\n            mockMvc.perform(get("/api/plugin/type"))\n                .andExpect(status().isOk)\n                .andExpect(jsonPath("$[0]").value("DUBBO"))\n        }\n    }\n    \n    \\```\n    \n    - Kotlin API version: 1.9\n    \n    // here are related classes:\n    // \'package: com.thoughtworks.archguard.evolution.domain.BadSmellSuite\n    // class BadSmellSuite {\n    //   id\n    //   suiteName\n    //   isDefault\n    //   thresholds\n    //   \n    // }\n    // \'package: com.thoughtworks.archguard.evolution.domain.BadSmellSuiteWithSelected\n    // class BadSmellSuiteWithSelected {\n    //   id\n    //   suiteName\n    //   isDefault\n    //   isSelected\n    //   thresholds\n    //   \n    // }\n    // \'package: com.thoughtworks.archguard.evolution.domain.BadSmellThresholdService\n    // \'@Service\n    // class BadSmellThresholdService {\n    //   badSmellSuitRepository\n    //   + fun getAllSuits(): List<BadSmellSuite>\n    //   + fun getBadSmellSuiteWithSelectedInfoBySystemId(systemId: Long): List<BadSmellSuiteWithSelected>\n    // }\n    \n    // here is current class information:\n    // \'package: com.thoughtworks.archguard.evolution.controller.EvolutionBadSmellController\n    // \'@RestController, @RequestMapping("/api/evolution")\n    // class EvolutionBadSmellController {\n    //   badSmellThresholdService\n    //   + @GetMapping("/badsmell-thresholds")     fun getAllThresholds(): List<BadSmellSuite>\n    //   + @GetMapping("/badsmell-thresholds/system/{systemId}")     fun getThresholdsBySystemId(@PathVariable("systemId") systemId: Long): List<BadSmellSuiteWithSelected>\n    // }\n    \n    Code:\n    // import com.thoughtworks.archguard.evolution.domain.BadSmellSuite\n    // import com.thoughtworks.archguard.evolution.domain.BadSmellSuiteWithSelected\n    // import com.thoughtworks.archguard.evolution.domain.BadSmellThresholdService\n    // import org.springframework.web.bind.annotation.GetMapping\n    // import org.springframework.web.bind.annotation.PathVariable\n    // import org.springframework.web.bind.annotation.RequestMapping\n    // import org.springframework.web.bind.annotation.RestController\n    \\```kotlin\n    @RestController\n    @RequestMapping("/api/evolution")\n    class EvolutionBadSmellController(val badSmellThresholdService: BadSmellThresholdService) {\n    \n        @GetMapping("/badsmell-thresholds")\n        fun getAllThresholds(): List<BadSmellSuite> {\n            return badSmellThresholdService.getAllSuits()\n        }\n    \n        @GetMapping("/badsmell-thresholds/system/{systemId}")\n        fun getThresholdsBySystemId(@PathVariable("systemId") systemId: Long): List<BadSmellSuiteWithSelected> {\n            return badSmellThresholdService.getBadSmellSuiteWithSelectedInfoBySystemId(systemId)\n        }\n    }\n    \\```\n    \n    Start  with `import` syntax here:\n'})}),"\n",(0,o.jsx)(t.h2,{id:"resources",children:"Resources"}),"\n",(0,o.jsx)(t.h3,{id:"testspark",children:"TestSpark"}),"\n",(0,o.jsx)(t.p,{children:"TestSpark \u76ee\u524d\u652f\u6301\u4e24\u79cd\u6d4b\u8bd5\u751f\u6210\u7b56\u7565\uff1a"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"\u57fa\u4e8e LLM \u7684\u6d4b\u8bd5\u751f\u6210\uff08\u4f7f\u7528 OpenAI \u548c JetBrains \u5185\u90e8 AI Assistant \u5e73\u53f0\uff09"}),"\n",(0,o.jsx)(t.li,{children:"\u57fa\u4e8e\u672c\u5730\u641c\u7d22\u7684\u6d4b\u8bd5\u751f\u6210\uff08\u4f7f\u7528 EvoSuite\uff09"}),"\n"]}),"\n",(0,o.jsx)(t.h4,{id:"method-1-llm-gen-prompt-example",children:"Method 1: LLM gen prompt example"}),"\n",(0,o.jsxs)(t.p,{children:["GitHub: ",(0,o.jsx)(t.a,{href:"https://github.com/JetBrains-Research/TestSpark/blob/development/src/main/resources/defaults/TestSpark.properties",children:"TestSpark"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-vtl",children:"Generate unit tests in $LANGUAGE for $NAME to achieve 100% line coverage for this class.\nDont use @Before and @After test methods.\nMake tests as atomic as possible.\nAll tests should be for $TESTING_PLATFORM.\nIn case of mocking, use $MOCKING_FRAMEWORK. But, do not use mocking for all tests.\nName all methods according to the template - [MethodUnderTest][Scenario]Test, and use only English letters.\nThe source code of class under test is as follows:\n$CODE\nHere are some information about other methods and classes used by the class under test. Only use them for creating objects, not your own ideas.\n$METHODS\n$POLYMORPHISM\n$TEST_SAMPLE\n"})}),"\n",(0,o.jsx)(t.h4,{id:"method-2-evosuite-gen",children:"Method 2: EvoSuite gen"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://www.evosuite.org/",children:"EvoSuite"})," \u662f\u4e00\u4e2a\u5de5\u5177\uff0c\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u5e26\u6709 Java \u4ee3\u7801\u7f16\u5199\u7684\u7c7b\u65ad\u8a00\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002"]})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(6540);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);