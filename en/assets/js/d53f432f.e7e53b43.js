"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1738],{8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},9525:e=>{e.exports=JSON.parse('{"permalink":"/en/blog/autodev-1-0-0","editUrl":"https://github.com/unit-mesh/auto-dev/tree/master/docs/blog/2023-08-06-autodev-1-0-0.md","source":"@site/i18n/en/docusaurus-plugin-content-blog/2023-08-06-autodev-1-0-0.md","title":"AutoDev 1.0","description":"In April, through the article \\"AutoDev","date":"2023-08-06T00:00:00.000Z","tags":[],"readingTime":3.82,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"AutoDev 1.0","Released":"Full-Process AI-Assisted Programming","slug":"autodev-1-0-0"},"unlisted":false,"prevItem":{"title":"AutoDev 1.4 Scaling AI-Assisted Development","permalink":"/en/blog/2023/10/22/autodev-1-4-0"},"nextItem":{"title":"AutoDev 0.7.0 - Generating Standardized Code, Deep Integration into Developer Daily Work","permalink":"/en/blog/autodev-0-7-0"}}')},9640:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});var t=i(9525),s=i(4848),o=i(8453);const r={title:"AutoDev 1.0",Released:"Full-Process AI-Assisted Programming",slug:"autodev-1-0-0"},l=void 0,a={authorsImageUrls:[]},d=[{value:"Designing Three Assistance Modes Around Developer Experience",id:"designing-three-assistance-modes-around-developer-experience",level:2},{value:"Auto Mode: Standardized Code Generation",id:"auto-mode-standardized-code-generation",level:3},{value:"Companion Mode: Daily Workflow Integration",id:"companion-mode-daily-workflow-integration",level:3},{value:"Chat Mode: A Peripheral Feature",id:"chat-mode-a-peripheral-feature",level:3},{value:"Reflections on LLM as Copilot",id:"reflections-on-llm-as-copilot",level:2},{value:"FAQ",id:"faq",level:2},{value:"How to Integrate Domestic/Private LLMs?",id:"how-to-integrate-domesticprivate-llms",level:3},{value:"Why Only Intellij Version?",id:"why-only-intellij-version",level:3},{value:"When Will VS Code Version Arrive?",id:"when-will-vs-code-version-arrive",level:3},{value:"Additional Notes",id:"additional-notes",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["In April, through the article ",(0,s.jsx)(n.strong,{children:'"AutoDev: AI Breaks Through R&D Efficiency, Exploring New Opportunities in Platform Engineering"'}),", we outlined the initial impact of AI on software development. We established several fundamental assumptions:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Large and medium-sized enterprises will ",(0,s.jsx)(n.strong,{children:"possess at least one"})," proprietary large language model."]}),"\n",(0,s.jsx)(n.li,{children:"Only end-to-end tools can achieve quality and efficiency improvements through AI."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Based on these assumptions, we began building AutoDev and open-sourced it. I've also documented all development insights on my blog, hoping to assist domestic enterprises in establishing their own AI-assisted programming capabilities."}),"\n",(0,s.jsxs)(n.p,{children:["As an open-source project, let's start with the GitHub address: ",(0,s.jsx)(n.a,{href:"https://github.com/unit-mesh/auto-dev",children:"https://github.com/unit-mesh/auto-dev"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"designing-three-assistance-modes-around-developer-experience",children:"Designing Three Assistance Modes Around Developer Experience"}),"\n",(0,s.jsx)(n.p,{children:'Initially, I didn\'t have a clear development blueprint. As a daily code-writing "expert-level" programmer, I built features based on my immediate needs.'}),"\n",(0,s.jsx)(n.p,{children:"Subsequently, I categorized all features into three assistance modes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Chat Mode"}),"\n",(0,s.jsx)(n.li,{children:"Copilot Mode"}),"\n",(0,s.jsx)(n.li,{children:"Completion Mode"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"auto-mode-standardized-code-generation",children:"Auto Mode: Standardized Code Generation"}),"\n",(0,s.jsxs)(n.p,{children:["Trigger method: All auto modes are under Context Actions, activated using the universal shortcut: ",(0,s.jsx)(n.strong,{children:"\u2325\u23ce"})," (macOS) or ",(0,s.jsx)(n.strong,{children:"Alt+Enter"})," (Windows/Linux)."]}),"\n",(0,s.jsx)(n.p,{children:"Design philosophy: Similar to the one-click pattern we designed in ClickPrompt. Code shouldn't be like various flashy demos online - it must consider existing team conventions, otherwise generated code remains unusable. Focusing on configurability and implicit knowledge scenarios, we implemented three Auto scenarios:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Auto CRUD"}),": Reads requirements from issue systems, uses a manually coded agent for continuous interaction to find suitable controllers, modify methods, add new methods, etc. Currently supports Kotlin and JavaScript."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Auto Test Generation"}),": Generates and automatically runs tests for selected classes/methods (when RunConfiguration is appropriate). Supports JavaScript, Kotlin, and Java."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Auto Code Completion"}),": Context-aware code filling. Capabilities vary by language due to limited resources:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Java: Incorporates ",(0,s.jsx)(n.strong,{children:"code specifications"})]}),"\n",(0,s.jsx)(n.li,{children:"Kotlin/Java: Adds parameter/return type classes as context"}),"\n",(0,s.jsx)(n.li,{children:"Other languages: Uses similarity algorithms (no questions about inspiration sources) comparable to GitHub Copilot and JetBrains AI Assistant"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Each auto mode includes automated context preparation. The following image shows ",(0,s.jsx)(n.strong,{children:"visible"})," context for code completion:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4896c2bb-7356-4d15-a7d8-344e61b7b8db/Untitled.png",alt:"Untitled"})}),"\n",(0,s.jsx)(n.p,{children:"This context combines configured specifications with BlogController-related fields, parameters, return types (e.g., BlogService), etc."}),"\n",(0,s.jsx)(n.p,{children:"Additionally, hidden contexts exist, such as language declarations in AutoDev configurations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:"You MUST Use \u4e2d\u6587 to return your answer !\n"})}),"\n",(0,s.jsx)(n.p,{children:'Interestingly, with just two "\u4e2d\u6587" mentions, there\'s about 50% chance of non-compliance. Considering adding three repetitions.'}),"\n",(0,s.jsx)(n.h3,{id:"companion-mode-daily-workflow-integration",children:"Companion Mode: Daily Workflow Integration"}),"\n",(0,s.jsx)(n.p,{children:"When designing companion mode, we referenced existing tools like AI Commit while addressing personal needs."}),"\n",(0,s.jsxs)(n.p,{children:["Since companion modes require waiting for LLM responses, they're grouped under ",(0,s.jsx)(n.code,{children:"AutoDev Chat"}),"."]}),"\n",(0,s.jsx)(n.p,{children:'However, JetBrains AI Assistant has become AutoDev\'s main competitor (and reference) since its release. Features like "Explain with AI" and "Explain error message with AI" demonstrate excellent UX - areas where we still have room for improvement.'}),"\n",(0,s.jsx)(n.p,{children:"In AutoDev, you can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Generate commit messages"}),"\n",(0,s.jsx)(n.li,{children:"Create release notes"}),"\n",(0,s.jsx)(n.li,{children:"Explain code"}),"\n",(0,s.jsx)(n.li,{children:"Refactor code"}),"\n",(0,s.jsx)(n.li,{children:"...and even generate DDL directly"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"chat-mode-a-peripheral-feature",children:"Chat Mode: A Peripheral Feature"}),"\n",(0,s.jsx)(n.p,{children:"After UI redesign (inspired by JetBrains' approach, given their limited China support), we implemented one-click chat via Context Actions (see Figure 1)."}),"\n",(0,s.jsx)(n.p,{children:"Chat freely here."}),"\n",(0,s.jsx)(n.h2,{id:"reflections-on-llm-as-copilot",children:"Reflections on LLM as Copilot"}),"\n",(0,s.jsx)(n.p,{children:"Currently, LLMs serve as Copilots. They won't replace software engineering specialization but enhance professional capabilities through AI-assisted tools, impacting individual workflows."}),"\n",(0,s.jsxs)(n.p,{children:["They should address ",(0,s.jsx)(n.strong,{children:'"tasks I avoid"'})," and ",(0,s.jsx)(n.strong,{children:'"repetitive tasks"'})," - writing tests, coding, resolving issues, commits, etc. As programmers, we should focus on creative design."]}),"\n",(0,s.jsx)(n.p,{children:"AutoDev focuses on: How can AI better assist human work while keeping engineers within their IDEs?"}),"\n",(0,s.jsxs)(n.p,{children:["The LLM as Copilot concept will see increasing tool refinement. As seasoned AI application engineers, we're contemplating how ",(0,s.jsx)(n.strong,{children:"LLM as Co-Integrator"})," can truly boost efficiency."]}),"\n",(0,s.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,s.jsx)(n.h3,{id:"how-to-integrate-domesticprivate-llms",children:"How to Integrate Domestic/Private LLMs?"}),"\n",(0,s.jsx)(n.p,{children:"We provide a Custom LLM Server Python interface example in the source code. Due to limited resources, we've only tested with internally deployed ChatGLM2. For other needs, please discuss via GitHub issues."}),"\n",(0,s.jsx)(n.h3,{id:"why-only-intellij-version",children:"Why Only Intellij Version?"}),"\n",(0,s.jsx)(n.p,{children:"As someone experienced in developing new language plugins, contributing to Intellij Community/Android Studio source code, and optimizing Harmony OS IDE architecture, I specialize in JetBrains IDE development."}),"\n",(0,s.jsx)(n.h3,{id:"when-will-vs-code-version-arrive",children:"When Will VS Code Version Arrive?"}),"\n",(0,s.jsx)(n.p,{children:"Short answer: Not soon."}),"\n",(0,s.jsx)(n.p,{children:"Though I've studied VS Code/X Editor source code:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"VS Code lacks critical IDE interfaces"}),"\n",(0,s.jsxs)(n.li,{children:["Implementation challenges:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"TextMate-based tokenization (unreliable Oniguruma regex)"}),"\n",(0,s.jsx)(n.li,{children:"Limited LSP implementation references"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"No quality reference implementations"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The ideal approach would be GitHub Copilot-style IDE-agnostic Agent mechanisms with TreeSitter for language processing."}),"\n",(0,s.jsx)(n.h2,{id:"additional-notes",children:"Additional Notes"}),"\n",(0,s.jsx)(n.p,{children:"AutoDev positions LLMs as developer Copilots, providing assistance tools to handle tedious tasks, enabling engineers to focus on creative design and problem-solving."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);